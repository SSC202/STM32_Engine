var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"svpwm/VF_Mode","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"E:\\STM32SSC\\STM32\\STM32SSC_Engine\\Code\\Test_Code\\4_PMSM\\1_FOC\\2_VF\\Mode\\svpwm\\VF_Mode_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'VF_Mode'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Mon Aug  5 17:10:43 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"VF_Mode.h\"                   /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  VF_Mode_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  VF_Mode_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (1) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* The option 'Remove error status field in real-time model data structure'\r\n   * is selected, therefore the following code does not need to execute.\r\n   */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"VF_Mode.c","type":"source","group":"model","path":"E:\\STM32SSC\\STM32\\STM32SSC_Engine\\Code\\Test_Code\\4_PMSM\\1_FOC\\2_VF\\Mode\\svpwm\\VF_Mode_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: VF_Mode.c\r\n *\r\n * Code generated for Simulink model 'VF_Mode'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Mon Aug  5 17:10:43 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"VF_Mode.h\"\r\n#include \"rtwtypes.h\"\r\n#include <math.h>\r\n#include <float.h>\r\n\r\n/* Exported block signals */\r\nreal32_T electric_theta;               /* '<S4>/Mod' */\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\nextern real32_T rt_modf(real32_T u0, real32_T u1);\r\nreal32_T rt_modf(real32_T u0, real32_T u1)\r\n{\r\n  real32_T y;\r\n  y = u0;\r\n  if (u1 == 0.0F) {\r\n    if (u0 == 0.0F) {\r\n      y = u1;\r\n    }\r\n  } else if (u0 == 0.0F) {\r\n    y = 0.0F / u1;\r\n  } else {\r\n    boolean_T yEq;\r\n    y = fmodf(u0, u1);\r\n    yEq = (y == 0.0F);\r\n    if ((!yEq) && (u1 > floorf(u1))) {\r\n      real32_T q;\r\n      q = fabsf(u0 / u1);\r\n      yEq = (fabsf(q - floorf(q + 0.5F)) <= FLT_EPSILON * q);\r\n    }\r\n\r\n    if (yEq) {\r\n      y = 0.0F;\r\n    } else if ((u0 < 0.0F) != (u1 < 0.0F)) {\r\n      y += u1;\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Model step function */\r\nvoid VF_Mode_step(void)\r\n{\r\n  real_T rtb_Add1_m;\r\n  real_T rtb_Add2;\r\n  real_T rtb_Divide1;\r\n  real_T rtb_Divide_n;\r\n  real_T rtb_Gain1_l;\r\n  real_T rtb_T4Switch;\r\n  int32_T rtb_Add;\r\n  real32_T rtb_Sum_g;\r\n  real32_T rtb_TrigonometricFunction;\r\n  real32_T rtb_TrigonometricFunction1;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/VF_Mode' */\r\n  /* Sum: '<S9>/Sum' incorporates:\r\n   *  Gain: '<S9>/Gain'\r\n   *  Inport: '<Root>/Freq'\r\n   *  UnitDelay: '<S9>/Unit Delay'\r\n   */\r\n  rtb_Sum_g = (real32_T)(0.00062831853071795862 * rtU.Freq) +\r\n    rtDW.UnitDelay_DSTATE;\r\n\r\n  /* If: '<S10>/If' incorporates:\r\n   *  Constant: '<S10>/Constant'\r\n   *  Constant: '<S10>/Constant1'\r\n   *  RelationalOperator: '<S10>/Relational Operator'\r\n   *  RelationalOperator: '<S10>/Relational Operator1'\r\n   */\r\n  if (rtb_Sum_g > 6.28318548F) {\r\n    /* Outputs for IfAction SubSystem: '<S10>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S11>/Action Port'\r\n     */\r\n    /* Sum: '<S11>/Sum' incorporates:\r\n     *  Constant: '<S11>/Constant'\r\n     */\r\n    rtb_Sum_g -= 6.28318548F;\r\n\r\n    /* End of Outputs for SubSystem: '<S10>/If Action Subsystem1' */\r\n  } else if (rtb_Sum_g < 0.0F) {\r\n    /* Outputs for IfAction SubSystem: '<S10>/If Action Subsystem3' incorporates:\r\n     *  ActionPort: '<S13>/Action Port'\r\n     */\r\n    /* Sum: '<S13>/Sum' incorporates:\r\n     *  Constant: '<S13>/Constant'\r\n     */\r\n    rtb_Sum_g += 6.28318548F;\r\n\r\n    /* End of Outputs for SubSystem: '<S10>/If Action Subsystem3' */\r\n  }\r\n\r\n  /* End of If: '<S10>/If' */\r\n\r\n  /* Math: '<S4>/Mod' incorporates:\r\n   *  Constant: '<S4>/Constant'\r\n   *  Sum: '<S4>/Add1'\r\n   */\r\n  electric_theta = rt_modf(rtb_Sum_g, 6.28318548F);\r\n\r\n  /* Trigonometry: '<S2>/Trigonometric Function' */\r\n  rtb_TrigonometricFunction = sinf(electric_theta);\r\n\r\n  /* Trigonometry: '<S2>/Trigonometric Function1' */\r\n  rtb_TrigonometricFunction1 = cosf(electric_theta);\r\n\r\n  /* Sum: '<S2>/Add1' incorporates:\r\n   *  Inport: '<Root>/u_d'\r\n   *  Inport: '<Root>/u_q'\r\n   *  Product: '<S2>/Product1'\r\n   *  Product: '<S2>/Product2'\r\n   */\r\n  rtb_Add1_m = rtU.u_d * rtb_TrigonometricFunction + rtU.u_q *\r\n    rtb_TrigonometricFunction1;\r\n\r\n  /* Gain: '<S6>/Gain' incorporates:\r\n   *  Gain: '<S8>/Gain1'\r\n   *  Inport: '<Root>/u_d'\r\n   *  Inport: '<Root>/u_q'\r\n   *  Product: '<S2>/Product'\r\n   *  Product: '<S2>/Product3'\r\n   *  Sum: '<S2>/Add'\r\n   */\r\n  rtb_Gain1_l = (rtU.u_d * rtb_TrigonometricFunction1 - rtU.u_q *\r\n                 rtb_TrigonometricFunction) * 0.8660254037844386;\r\n\r\n  /* Gain: '<S6>/Gain1' incorporates:\r\n   *  Gain: '<S8>/Gain2'\r\n   */\r\n  rtb_Divide1 = 0.5 * rtb_Add1_m;\r\n\r\n  /* Sum: '<S6>/Add' incorporates:\r\n   *  Gain: '<S6>/Gain'\r\n   *  Gain: '<S6>/Gain1'\r\n   *  Gain: '<S6>/Gain2'\r\n   *  Gain: '<S6>/Gain3'\r\n   *  Sum: '<S6>/Add1'\r\n   *  Sum: '<S6>/Add2'\r\n   *  Switch: '<S6>/ A Switch'\r\n   *  Switch: '<S6>/ B Switch'\r\n   *  Switch: '<S6>/ C Switch'\r\n   */\r\n  rtb_Add = (((rtb_Gain1_l - rtb_Divide1 > 0.0) << 1) + (rtb_Add1_m > 0.0)) +\r\n    (((0.0 - rtb_Gain1_l) - rtb_Divide1 > 0.0) << 2);\r\n\r\n  /* Gain: '<S5>/Gain1' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   */\r\n  rtb_Divide_n = 0.25 * rtU.T_pwm;\r\n\r\n  /* Product: '<S8>/Divide' incorporates:\r\n   *  Gain: '<S8>/Gain'\r\n   *  Inport: '<Root>/T_pwm'\r\n   *  Inport: '<Root>/u_dc'\r\n   */\r\n  rtb_Add2 = 1.7320508075688772 * rtU.T_pwm / rtU.u_dc;\r\n\r\n  /* MultiPortSwitch: '<S7>/T4 Switch' incorporates:\r\n   *  Gain: '<S7>/Gain'\r\n   *  Gain: '<S7>/Gain1'\r\n   *  Gain: '<S7>/Gain2'\r\n   *  Product: '<S8>/Product'\r\n   *  Product: '<S8>/Product1'\r\n   *  Product: '<S8>/Product2'\r\n   *  Sum: '<S8>/Add'\r\n   *  Sum: '<S8>/Add1'\r\n   */\r\n  switch (rtb_Add) {\r\n   case 1:\r\n    rtb_T4Switch = (rtb_Divide1 - rtb_Gain1_l) * rtb_Add2;\r\n\r\n    /* MultiPortSwitch: '<S7>/T6 Switch' incorporates:\r\n     *  Product: '<S8>/Product1'\r\n     *  Product: '<S8>/Product2'\r\n     *  Sum: '<S8>/Add'\r\n     *  Sum: '<S8>/Add1'\r\n     */\r\n    rtb_Add1_m = (rtb_Gain1_l + rtb_Divide1) * rtb_Add2;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_T4Switch = (rtb_Gain1_l + rtb_Divide1) * rtb_Add2;\r\n\r\n    /* MultiPortSwitch: '<S7>/T6 Switch' incorporates:\r\n     *  Gain: '<S7>/Gain'\r\n     *  Product: '<S8>/Product'\r\n     *  Product: '<S8>/Product1'\r\n     *  Sum: '<S8>/Add'\r\n     */\r\n    rtb_Add1_m = -(rtb_Add1_m * rtb_Add2);\r\n    break;\r\n\r\n   case 3:\r\n    rtb_T4Switch = -((rtb_Divide1 - rtb_Gain1_l) * rtb_Add2);\r\n\r\n    /* MultiPortSwitch: '<S7>/T6 Switch' incorporates:\r\n     *  Gain: '<S7>/Gain2'\r\n     *  Product: '<S8>/Product'\r\n     *  Product: '<S8>/Product2'\r\n     *  Sum: '<S8>/Add1'\r\n     */\r\n    rtb_Add1_m *= rtb_Add2;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_T4Switch = -(rtb_Add1_m * rtb_Add2);\r\n\r\n    /* MultiPortSwitch: '<S7>/T6 Switch' incorporates:\r\n     *  Gain: '<S7>/Gain'\r\n     *  Product: '<S8>/Product'\r\n     *  Product: '<S8>/Product2'\r\n     *  Sum: '<S8>/Add1'\r\n     */\r\n    rtb_Add1_m = (rtb_Divide1 - rtb_Gain1_l) * rtb_Add2;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_T4Switch = rtb_Add1_m * rtb_Add2;\r\n\r\n    /* MultiPortSwitch: '<S7>/T6 Switch' incorporates:\r\n     *  Gain: '<S7>/Gain1'\r\n     *  Product: '<S8>/Product'\r\n     *  Product: '<S8>/Product1'\r\n     *  Sum: '<S8>/Add'\r\n     */\r\n    rtb_Add1_m = -((rtb_Gain1_l + rtb_Divide1) * rtb_Add2);\r\n    break;\r\n\r\n   default:\r\n    rtb_T4Switch = -((rtb_Gain1_l + rtb_Divide1) * rtb_Add2);\r\n\r\n    /* MultiPortSwitch: '<S7>/T6 Switch' incorporates:\r\n     *  Gain: '<S7>/Gain1'\r\n     *  Gain: '<S7>/Gain2'\r\n     *  Product: '<S8>/Product1'\r\n     *  Product: '<S8>/Product2'\r\n     *  Sum: '<S8>/Add'\r\n     *  Sum: '<S8>/Add1'\r\n     */\r\n    rtb_Add1_m = -((rtb_Divide1 - rtb_Gain1_l) * rtb_Add2);\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S7>/T4 Switch' */\r\n\r\n  /* Sum: '<S7>/Add1' incorporates:\r\n   *  Sum: '<S7>/Add'\r\n   */\r\n  rtb_Add2 = rtb_T4Switch + rtb_Add1_m;\r\n\r\n  /* Product: '<S7>/Divide' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   *  Sum: '<S7>/Add1'\r\n   */\r\n  rtb_Gain1_l = rtU.T_pwm / rtb_Add2;\r\n\r\n  /* Switch: '<S7>/Switch' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   *  Product: '<S7>/Product'\r\n   *  Product: '<S7>/Product1'\r\n   *  Sum: '<S7>/Add'\r\n   *  Switch: '<S7>/Switch1'\r\n   */\r\n  if (rtb_Add2 - rtU.T_pwm > 0.0) {\r\n    rtb_T4Switch *= rtb_Gain1_l;\r\n    rtb_Add1_m *= rtb_Gain1_l;\r\n  }\r\n\r\n  /* Gain: '<S5>/Gain' incorporates:\r\n   *  Switch: '<S7>/Switch'\r\n   */\r\n  rtb_Add2 = 0.25 * rtb_T4Switch;\r\n\r\n  /* Gain: '<S5>/Gain2' incorporates:\r\n   *  Switch: '<S7>/Switch1'\r\n   */\r\n  rtb_Divide1 = 0.25 * rtb_Add1_m;\r\n\r\n  /* Sum: '<S5>/Add' */\r\n  rtb_T4Switch = (rtb_Divide_n - rtb_Add2) - rtb_Divide1;\r\n\r\n  /* Sum: '<S5>/Add1' incorporates:\r\n   *  Sum: '<S5>/Add2'\r\n   */\r\n  rtb_Divide_n += rtb_Add2;\r\n  rtb_Add1_m = rtb_Divide_n - rtb_Divide1;\r\n\r\n  /* Sum: '<S5>/Add2' */\r\n  rtb_Add2 = rtb_Divide_n + rtb_Divide1;\r\n\r\n  /* MultiPortSwitch: '<S5>/Ta Switch' */\r\n  switch (rtb_Add) {\r\n   case 1:\r\n    rtb_Divide_n = rtb_Add1_m;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_Divide_n = rtb_T4Switch;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_Divide_n = rtb_T4Switch;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_Divide_n = rtb_Add2;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_Divide_n = rtb_Add2;\r\n    break;\r\n\r\n   default:\r\n    rtb_Divide_n = rtb_Add1_m;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S5>/Ta Switch' */\r\n\r\n  /* Product: '<S5>/Divide' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   */\r\n  rtb_Divide_n /= rtU.T_pwm;\r\n\r\n  /* MultiPortSwitch: '<S5>/Tc Switch' */\r\n  switch (rtb_Add) {\r\n   case 1:\r\n    rtb_Divide1 = rtb_Add2;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_Divide1 = rtb_Add1_m;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_Divide1 = rtb_Add2;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_Divide1 = rtb_T4Switch;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_Divide1 = rtb_Add1_m;\r\n    break;\r\n\r\n   default:\r\n    rtb_Divide1 = rtb_T4Switch;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S5>/Tc Switch' */\r\n\r\n  /* Product: '<S5>/Divide1' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   */\r\n  rtb_Divide1 /= rtU.T_pwm;\r\n\r\n  /* MultiPortSwitch: '<S5>/Tb Switch' */\r\n  switch (rtb_Add) {\r\n   case 1:\r\n    rtb_Add2 = rtb_T4Switch;\r\n    break;\r\n\r\n   case 2:\r\n    break;\r\n\r\n   case 3:\r\n    rtb_Add2 = rtb_Add1_m;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_Add2 = rtb_Add1_m;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_Add2 = rtb_T4Switch;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S5>/Tb Switch' */\r\n\r\n  /* Update for UnitDelay: '<S9>/Unit Delay' */\r\n  rtDW.UnitDelay_DSTATE = rtb_Sum_g;\r\n\r\n  /* Outport: '<Root>/Duty' incorporates:\r\n   *  Constant: '<S3>/Constant'\r\n   *  Gain: '<S3>/Gain'\r\n   *  Inport: '<Root>/T_pwm'\r\n   *  Product: '<S5>/Divide2'\r\n   *  Sum: '<S3>/Sum'\r\n   */\r\n  rtY.Duty[0] = 1.0 - 2.0 * rtb_Divide_n;\r\n  rtY.Duty[1] = 1.0 - rtb_Add2 / rtU.T_pwm * 2.0;\r\n  rtY.Duty[2] = 1.0 - 2.0 * rtb_Divide1;\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/VF_Mode' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid VF_Mode_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"VF_Mode.h","type":"header","group":"model","path":"E:\\STM32SSC\\STM32\\STM32SSC_Engine\\Code\\Test_Code\\4_PMSM\\1_FOC\\2_VF\\Mode\\svpwm\\VF_Mode_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: VF_Mode.h\r\n *\r\n * Code generated for Simulink model 'VF_Mode'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Mon Aug  5 17:10:43 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_VF_Mode_h_\r\n#define RTW_HEADER_VF_Mode_h_\r\n#ifndef VF_Mode_COMMON_INCLUDES_\r\n#define VF_Mode_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* VF_Mode_COMMON_INCLUDES_ */\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real32_T UnitDelay_DSTATE;           /* '<S9>/Unit Delay' */\r\n} DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T u_d;                          /* '<Root>/u_d' */\r\n  real_T u_q;                          /* '<Root>/u_q' */\r\n  real_T T_pwm;                        /* '<Root>/T_pwm' */\r\n  real_T Freq;                         /* '<Root>/Freq' */\r\n  real_T u_dc;                         /* '<Root>/u_dc' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T Duty[3];                      /* '<Root>/Duty' */\r\n} ExtY;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/*\r\n * Exported Global Signals\r\n *\r\n * Note: Exported global signals are block signals with an exported global\r\n * storage class designation.  Code generation will declare the memory for\r\n * these signals and export their symbols.\r\n *\r\n */\r\nextern real32_T electric_theta;        /* '<S4>/Mod' */\r\n\r\n/* Model entry point functions */\r\nextern void VF_Mode_initialize(void);\r\nextern void VF_Mode_step(void);\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S2>/Scope' : Unused code path elimination\r\n * Block '<S5>/Scope' : Unused code path elimination\r\n * Block '<S5>/Scope1' : Unused code path elimination\r\n * Block '<S6>/Scope' : Unused code path elimination\r\n * Block '<S7>/Scope' : Unused code path elimination\r\n * Block '<S7>/Scope1' : Unused code path elimination\r\n * Block '<S8>/Scope' : Unused code path elimination\r\n * Block '<S4>/Add2' : Unused code path elimination\r\n * Block '<S4>/Add3' : Unused code path elimination\r\n * Block '<S4>/Constant1' : Unused code path elimination\r\n * Block '<S4>/Constant3' : Unused code path elimination\r\n * Block '<S4>/Data Type Conversion1' : Unused code path elimination\r\n * Block '<S4>/Data Type Conversion2' : Unused code path elimination\r\n * Block '<S4>/Mod3' : Unused code path elimination\r\n * Block '<S4>/Mod4' : Unused code path elimination\r\n * Block '<S4>/Scope1' : Unused code path elimination\r\n * Block '<S4>/Data Type Conversion' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('svpwm/VF_Mode')    - opens subsystem svpwm/VF_Mode\r\n * hilite_system('svpwm/VF_Mode/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'svpwm'\r\n * '<S1>'   : 'svpwm/VF_Mode'\r\n * '<S2>'   : 'svpwm/VF_Mode/AntiPark'\r\n * '<S3>'   : 'svpwm/VF_Mode/SVPWM'\r\n * '<S4>'   : 'svpwm/VF_Mode/ThreePhaseCurrGenerator'\r\n * '<S5>'   : 'svpwm/VF_Mode/SVPWM/Duty_Caculator'\r\n * '<S6>'   : 'svpwm/VF_Mode/SVPWM/Sector_Select'\r\n * '<S7>'   : 'svpwm/VF_Mode/SVPWM/T4_T6_Caculator'\r\n * '<S8>'   : 'svpwm/VF_Mode/SVPWM/X_Y_Z_Caculator'\r\n * '<S9>'   : 'svpwm/VF_Mode/ThreePhaseCurrGenerator/FreqGenerator'\r\n * '<S10>'  : 'svpwm/VF_Mode/ThreePhaseCurrGenerator/FreqGenerator/RangeLimit'\r\n * '<S11>'  : 'svpwm/VF_Mode/ThreePhaseCurrGenerator/FreqGenerator/RangeLimit/If Action Subsystem1'\r\n * '<S12>'  : 'svpwm/VF_Mode/ThreePhaseCurrGenerator/FreqGenerator/RangeLimit/If Action Subsystem2'\r\n * '<S13>'  : 'svpwm/VF_Mode/ThreePhaseCurrGenerator/FreqGenerator/RangeLimit/If Action Subsystem3'\r\n */\r\n#endif                                 /* RTW_HEADER_VF_Mode_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"E:\\STM32SSC\\STM32\\STM32SSC_Engine\\Code\\Test_Code\\4_PMSM\\1_FOC\\2_VF\\Mode\\svpwm\\VF_Mode_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'VF_Mode'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Mon Aug  5 17:10:43 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":false,"showJustificationLinks":false,"showProfilingInfo":false,"showTaskSummary":false}};