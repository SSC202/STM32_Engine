var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"if_mode/Currloop_Mode","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"E:\\STM32SSC\\STM32\\STM32SSC_Engine\\Code\\Test_Code\\4_PMSM\\1_FOC\\3_IF\\Mode\\IF\\Currloop_Mode_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'Currloop_Mode'.\r\n *\r\n * Model version                  : 1.6\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Aug 15 17:06:22 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"Currloop_Mode.h\"             /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  Currloop_Mode_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  Currloop_Mode_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (1) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* The option 'Remove error status field in real-time model data structure'\r\n   * is selected, therefore the following code does not need to execute.\r\n   */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Currloop_Mode.c","type":"source","group":"model","path":"E:\\STM32SSC\\STM32\\STM32SSC_Engine\\Code\\Test_Code\\4_PMSM\\1_FOC\\3_IF\\Mode\\IF\\Currloop_Mode_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: Currloop_Mode.c\r\n *\r\n * Code generated for Simulink model 'Currloop_Mode'.\r\n *\r\n * Model version                  : 1.6\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Aug 15 17:06:22 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Currloop_Mode.h\"\r\n#include <math.h>\r\n#include \"rtwtypes.h\"\r\n#ifndef UCHAR_MAX\r\n#include <limits.h>\r\n#endif\r\n\r\n#if ( UCHAR_MAX != (0xFFU) ) || ( SCHAR_MAX != (0x7F) )\r\n#error Code was generated for compiler with different sized uchar/char. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( USHRT_MAX != (0xFFFFU) ) || ( SHRT_MAX != (0x7FFF) )\r\n#error Code was generated for compiler with different sized ushort/short. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( UINT_MAX != (0xFFFFFFFFU) ) || ( INT_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized uint/int. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( ULONG_MAX != (0xFFFFFFFFU) ) || ( LONG_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized ulong/long. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n/* Skipping ulong_long/long_long check: insufficient preprocessor integer range. */\r\n\r\n/* Exported block signals */\r\nreal32_T i_alpha;                      /* '<S3>/Add2' */\r\nreal32_T i_beta;                       /* '<S3>/Gain2' */\r\nreal32_T i_d;                          /* '<S5>/Add' */\r\nreal32_T i_q;                          /* '<S5>/Add1' */\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Model step function */\r\nvoid Currloop_Mode_step(void)\r\n{\r\n  int32_T rtb_Add;\r\n  real32_T rtb_Add2;\r\n  real32_T rtb_DeadZone;\r\n  real32_T rtb_DeadZone_j;\r\n  real32_T rtb_Divide1;\r\n  real32_T rtb_Divide_i;\r\n  real32_T rtb_Divide_j;\r\n  real32_T rtb_Gain2_f;\r\n  real32_T rtb_IProdOut;\r\n  real32_T rtb_T4Switch;\r\n  int16_T rtb_IProdOut_d;\r\n  int8_T tmp;\r\n  int8_T tmp_0;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/Currloop_Mode' */\r\n  /* Sum: '<S3>/Add2' incorporates:\r\n   *  Gain: '<S3>/Gain'\r\n   *  Gain: '<S3>/Gain1'\r\n   *  Inport: '<Root>/I_a'\r\n   *  Inport: '<Root>/I_b'\r\n   *  Inport: '<Root>/I_c'\r\n   *  Sum: '<S3>/Add'\r\n   */\r\n  i_alpha = 0.666666687F * rtU.I_a - (rtU.I_b + rtU.I_c) * 0.333333343F;\r\n\r\n  /* Trigonometry: '<S5>/Trigonometric Function1' incorporates:\r\n   *  Inport: '<Root>/electric_theta'\r\n   *  Trigonometry: '<S2>/Trigonometric Function1'\r\n   */\r\n  rtb_Add2 = cosf(rtU.electric_theta);\r\n\r\n  /* Gain: '<S3>/Gain2' incorporates:\r\n   *  Inport: '<Root>/I_b'\r\n   *  Inport: '<Root>/I_c'\r\n   *  Sum: '<S3>/Add1'\r\n   */\r\n  i_beta = (rtU.I_b - rtU.I_c) * 0.577350259F;\r\n\r\n  /* Trigonometry: '<S5>/Trigonometric Function' incorporates:\r\n   *  Inport: '<Root>/electric_theta'\r\n   *  Trigonometry: '<S2>/Trigonometric Function'\r\n   */\r\n  rtb_T4Switch = sinf(rtU.electric_theta);\r\n\r\n  /* Sum: '<S5>/Add' incorporates:\r\n   *  Product: '<S5>/Product'\r\n   *  Product: '<S5>/Product1'\r\n   *  Trigonometry: '<S5>/Trigonometric Function'\r\n   *  Trigonometry: '<S5>/Trigonometric Function1'\r\n   */\r\n  i_d = i_alpha * rtb_Add2 + i_beta * rtb_T4Switch;\r\n\r\n  /* Sum: '<S51>/Sum' incorporates:\r\n   *  Constant: '<S4>/Constant'\r\n   *  Constant: '<S4>/Constant3'\r\n   *  DiscreteIntegrator: '<S42>/Integrator'\r\n   *  Product: '<S47>/PProd Out'\r\n   *  Sum: '<S4>/Sum1'\r\n   */\r\n  rtb_DeadZone = (0.0F - i_d) * 0.17F + (real32_T)rtDW.Integrator_DSTATE_l *\r\n    0.0001F;\r\n\r\n  /* Saturate: '<S49>/Saturation' */\r\n  if (rtb_DeadZone > 12.4707661F) {\r\n    rtb_Divide_j = 12.4707661F;\r\n  } else if (rtb_DeadZone < -12.4707661F) {\r\n    rtb_Divide_j = -12.4707661F;\r\n  } else {\r\n    rtb_Divide_j = rtb_DeadZone;\r\n  }\r\n\r\n  /* End of Saturate: '<S49>/Saturation' */\r\n\r\n  /* Sum: '<S5>/Add1' incorporates:\r\n   *  Product: '<S5>/Product2'\r\n   *  Product: '<S5>/Product3'\r\n   *  Trigonometry: '<S5>/Trigonometric Function'\r\n   *  Trigonometry: '<S5>/Trigonometric Function1'\r\n   */\r\n  i_q = i_beta * rtb_Add2 - i_alpha * rtb_T4Switch;\r\n\r\n  /* Sum: '<S4>/Sum7' incorporates:\r\n   *  Inport: '<Root>/iq_ref'\r\n   */\r\n  rtb_IProdOut = rtU.iq_ref - i_q;\r\n\r\n  /* Sum: '<S101>/Sum' incorporates:\r\n   *  Constant: '<S4>/Constant1'\r\n   *  DiscreteIntegrator: '<S92>/Integrator'\r\n   *  Product: '<S97>/PProd Out'\r\n   */\r\n  rtb_DeadZone_j = rtb_IProdOut * 0.17F + rtDW.Integrator_DSTATE;\r\n\r\n  /* Saturate: '<S99>/Saturation' */\r\n  if (rtb_DeadZone_j > 12.4707661F) {\r\n    rtb_Divide1 = 12.4707661F;\r\n  } else if (rtb_DeadZone_j < -12.4707661F) {\r\n    rtb_Divide1 = -12.4707661F;\r\n  } else {\r\n    rtb_Divide1 = rtb_DeadZone_j;\r\n  }\r\n\r\n  /* End of Saturate: '<S99>/Saturation' */\r\n\r\n  /* Sum: '<S2>/Add1' incorporates:\r\n   *  Product: '<S2>/Product1'\r\n   *  Product: '<S2>/Product2'\r\n   */\r\n  rtb_Divide_i = rtb_Divide_j * rtb_T4Switch + rtb_Divide1 * rtb_Add2;\r\n\r\n  /* Gain: '<S110>/Gain' incorporates:\r\n   *  Gain: '<S112>/Gain1'\r\n   *  Product: '<S2>/Product'\r\n   *  Product: '<S2>/Product3'\r\n   *  Sum: '<S2>/Add'\r\n   */\r\n  rtb_Gain2_f = (rtb_Divide_j * rtb_Add2 - rtb_Divide1 * rtb_T4Switch) *\r\n    0.866025388F;\r\n\r\n  /* Gain: '<S110>/Gain1' incorporates:\r\n   *  Gain: '<S112>/Gain2'\r\n   */\r\n  rtb_Divide1 = 0.5F * rtb_Divide_i;\r\n\r\n  /* Sum: '<S110>/Add' incorporates:\r\n   *  Gain: '<S110>/Gain'\r\n   *  Gain: '<S110>/Gain1'\r\n   *  Gain: '<S110>/Gain2'\r\n   *  Gain: '<S110>/Gain3'\r\n   *  Sum: '<S110>/Add1'\r\n   *  Sum: '<S110>/Add2'\r\n   *  Switch: '<S110>/ A Switch'\r\n   *  Switch: '<S110>/ B Switch'\r\n   *  Switch: '<S110>/ C Switch'\r\n   */\r\n  rtb_Add = (((rtb_Gain2_f - rtb_Divide1 > 0.0F) << 1) + (rtb_Divide_i > 0.0F))\r\n    + (((0.0F - rtb_Gain2_f) - rtb_Divide1 > 0.0F) << 2);\r\n\r\n  /* Gain: '<S109>/Gain1' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   */\r\n  rtb_Add2 = 0.25F * rtU.T_pwm;\r\n\r\n  /* Product: '<S112>/Divide' incorporates:\r\n   *  Gain: '<S112>/Gain'\r\n   *  Inport: '<Root>/T_pwm'\r\n   *  Inport: '<Root>/u_dc'\r\n   */\r\n  rtb_Divide_j = 1.73205078F * rtU.T_pwm / rtU.u_dc;\r\n\r\n  /* MultiPortSwitch: '<S111>/T4 Switch' incorporates:\r\n   *  Gain: '<S111>/Gain'\r\n   *  Gain: '<S111>/Gain1'\r\n   *  Gain: '<S111>/Gain2'\r\n   *  Product: '<S112>/Product'\r\n   *  Product: '<S112>/Product1'\r\n   *  Product: '<S112>/Product2'\r\n   *  Sum: '<S112>/Add'\r\n   *  Sum: '<S112>/Add1'\r\n   */\r\n  switch (rtb_Add) {\r\n   case 1:\r\n    rtb_T4Switch = (rtb_Divide1 - rtb_Gain2_f) * rtb_Divide_j;\r\n\r\n    /* MultiPortSwitch: '<S111>/T6 Switch' incorporates:\r\n     *  Product: '<S112>/Product1'\r\n     *  Product: '<S112>/Product2'\r\n     *  Sum: '<S112>/Add'\r\n     *  Sum: '<S112>/Add1'\r\n     */\r\n    rtb_Divide_j *= rtb_Gain2_f + rtb_Divide1;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_T4Switch = (rtb_Gain2_f + rtb_Divide1) * rtb_Divide_j;\r\n\r\n    /* MultiPortSwitch: '<S111>/T6 Switch' incorporates:\r\n     *  Gain: '<S111>/Gain'\r\n     *  Product: '<S112>/Product'\r\n     *  Product: '<S112>/Product1'\r\n     *  Sum: '<S112>/Add'\r\n     */\r\n    rtb_Divide_j = -(rtb_Divide_i * rtb_Divide_j);\r\n    break;\r\n\r\n   case 3:\r\n    rtb_T4Switch = -((rtb_Divide1 - rtb_Gain2_f) * rtb_Divide_j);\r\n\r\n    /* MultiPortSwitch: '<S111>/T6 Switch' incorporates:\r\n     *  Gain: '<S111>/Gain2'\r\n     *  Product: '<S112>/Product'\r\n     *  Product: '<S112>/Product2'\r\n     *  Sum: '<S112>/Add1'\r\n     */\r\n    rtb_Divide_j *= rtb_Divide_i;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_T4Switch = -(rtb_Divide_i * rtb_Divide_j);\r\n\r\n    /* MultiPortSwitch: '<S111>/T6 Switch' incorporates:\r\n     *  Gain: '<S111>/Gain'\r\n     *  Product: '<S112>/Product'\r\n     *  Product: '<S112>/Product2'\r\n     *  Sum: '<S112>/Add1'\r\n     */\r\n    rtb_Divide_j *= rtb_Divide1 - rtb_Gain2_f;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_T4Switch = rtb_Divide_i * rtb_Divide_j;\r\n\r\n    /* MultiPortSwitch: '<S111>/T6 Switch' incorporates:\r\n     *  Gain: '<S111>/Gain1'\r\n     *  Product: '<S112>/Product'\r\n     *  Product: '<S112>/Product1'\r\n     *  Sum: '<S112>/Add'\r\n     */\r\n    rtb_Divide_j = -((rtb_Gain2_f + rtb_Divide1) * rtb_Divide_j);\r\n    break;\r\n\r\n   default:\r\n    rtb_T4Switch = -((rtb_Gain2_f + rtb_Divide1) * rtb_Divide_j);\r\n\r\n    /* MultiPortSwitch: '<S111>/T6 Switch' incorporates:\r\n     *  Gain: '<S111>/Gain1'\r\n     *  Gain: '<S111>/Gain2'\r\n     *  Product: '<S112>/Product1'\r\n     *  Product: '<S112>/Product2'\r\n     *  Sum: '<S112>/Add'\r\n     *  Sum: '<S112>/Add1'\r\n     */\r\n    rtb_Divide_j = -((rtb_Divide1 - rtb_Gain2_f) * rtb_Divide_j);\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S111>/T4 Switch' */\r\n\r\n  /* Sum: '<S111>/Add1' incorporates:\r\n   *  Sum: '<S111>/Add'\r\n   */\r\n  rtb_Divide1 = rtb_T4Switch + rtb_Divide_j;\r\n\r\n  /* Product: '<S111>/Divide' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   *  Sum: '<S111>/Add1'\r\n   */\r\n  rtb_Gain2_f = rtU.T_pwm / rtb_Divide1;\r\n\r\n  /* Switch: '<S111>/Switch' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   *  Product: '<S111>/Product'\r\n   *  Product: '<S111>/Product1'\r\n   *  Sum: '<S111>/Add'\r\n   *  Switch: '<S111>/Switch1'\r\n   */\r\n  if (rtb_Divide1 - rtU.T_pwm > 0.0F) {\r\n    rtb_T4Switch *= rtb_Gain2_f;\r\n    rtb_Divide_j *= rtb_Gain2_f;\r\n  }\r\n\r\n  /* Gain: '<S109>/Gain' incorporates:\r\n   *  Switch: '<S111>/Switch'\r\n   */\r\n  rtb_Divide1 = 0.25F * rtb_T4Switch;\r\n\r\n  /* Gain: '<S109>/Gain2' incorporates:\r\n   *  Switch: '<S111>/Switch1'\r\n   */\r\n  rtb_Divide_i = 0.25F * rtb_Divide_j;\r\n\r\n  /* Sum: '<S109>/Add' */\r\n  rtb_Divide_j = (rtb_Add2 - rtb_Divide1) - rtb_Divide_i;\r\n\r\n  /* Sum: '<S109>/Add1' incorporates:\r\n   *  Sum: '<S109>/Add2'\r\n   */\r\n  rtb_Add2 += rtb_Divide1;\r\n  rtb_T4Switch = rtb_Add2 - rtb_Divide_i;\r\n\r\n  /* Sum: '<S109>/Add2' */\r\n  rtb_Add2 += rtb_Divide_i;\r\n\r\n  /* MultiPortSwitch: '<S109>/Ta Switch' */\r\n  switch (rtb_Add) {\r\n   case 1:\r\n    rtb_Divide_i = rtb_T4Switch;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_Divide_i = rtb_Divide_j;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_Divide_i = rtb_Divide_j;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_Divide_i = rtb_Add2;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_Divide_i = rtb_Add2;\r\n    break;\r\n\r\n   default:\r\n    rtb_Divide_i = rtb_T4Switch;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S109>/Ta Switch' */\r\n\r\n  /* Product: '<S109>/Divide' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   */\r\n  rtb_Divide_i /= rtU.T_pwm;\r\n\r\n  /* MultiPortSwitch: '<S109>/Tc Switch' */\r\n  switch (rtb_Add) {\r\n   case 1:\r\n    rtb_Divide1 = rtb_Add2;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_Divide1 = rtb_T4Switch;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_Divide1 = rtb_Add2;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_Divide1 = rtb_Divide_j;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_Divide1 = rtb_T4Switch;\r\n    break;\r\n\r\n   default:\r\n    rtb_Divide1 = rtb_Divide_j;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S109>/Tc Switch' */\r\n\r\n  /* Product: '<S109>/Divide1' incorporates:\r\n   *  Inport: '<Root>/T_pwm'\r\n   */\r\n  rtb_Divide1 /= rtU.T_pwm;\r\n\r\n  /* MultiPortSwitch: '<S109>/Tb Switch' */\r\n  switch (rtb_Add) {\r\n   case 1:\r\n    rtb_Add2 = rtb_Divide_j;\r\n    break;\r\n\r\n   case 2:\r\n    break;\r\n\r\n   case 3:\r\n    rtb_Add2 = rtb_T4Switch;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_Add2 = rtb_T4Switch;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_Add2 = rtb_Divide_j;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S109>/Tb Switch' */\r\n\r\n  /* DeadZone: '<S85>/DeadZone' */\r\n  if (rtb_DeadZone_j > 12.4707661F) {\r\n    rtb_DeadZone_j -= 12.4707661F;\r\n  } else if (rtb_DeadZone_j >= -12.4707661F) {\r\n    rtb_DeadZone_j = 0.0F;\r\n  } else {\r\n    rtb_DeadZone_j -= -12.4707661F;\r\n  }\r\n\r\n  /* End of DeadZone: '<S85>/DeadZone' */\r\n\r\n  /* Product: '<S89>/IProd Out' incorporates:\r\n   *  Constant: '<S4>/Constant2'\r\n   */\r\n  rtb_IProdOut *= 35.0F;\r\n\r\n  /* DeadZone: '<S35>/DeadZone' */\r\n  if (rtb_DeadZone > 12.4707661F) {\r\n    rtb_DeadZone -= 12.4707661F;\r\n  } else if (rtb_DeadZone >= -12.4707661F) {\r\n    rtb_DeadZone = 0.0F;\r\n  } else {\r\n    rtb_DeadZone -= -12.4707661F;\r\n  }\r\n\r\n  /* End of DeadZone: '<S35>/DeadZone' */\r\n\r\n  /* Product: '<S39>/IProd Out' incorporates:\r\n   *  Constant: '<S4>/Constant'\r\n   *  Constant: '<S4>/Constant4'\r\n   *  Sum: '<S4>/Sum1'\r\n   */\r\n  rtb_IProdOut_d = (int16_T)floorf((0.0F - i_d) * 35.0F);\r\n\r\n  /* Switch: '<S33>/Switch1' incorporates:\r\n   *  Constant: '<S33>/Constant'\r\n   *  Constant: '<S33>/Constant2'\r\n   *  RelationalOperator: '<S33>/fix for DT propagation issue'\r\n   */\r\n  if (rtb_DeadZone > 0.0F) {\r\n    tmp = 1;\r\n  } else {\r\n    tmp = -1;\r\n  }\r\n\r\n  /* Switch: '<S33>/Switch2' incorporates:\r\n   *  Constant: '<S33>/Clamping_zero'\r\n   *  Constant: '<S33>/Constant3'\r\n   *  Constant: '<S33>/Constant4'\r\n   *  RelationalOperator: '<S33>/fix for DT propagation issue1'\r\n   */\r\n  if (rtb_IProdOut_d > 0) {\r\n    tmp_0 = 1;\r\n  } else {\r\n    tmp_0 = -1;\r\n  }\r\n\r\n  /* Switch: '<S33>/Switch' incorporates:\r\n   *  Constant: '<S33>/Constant1'\r\n   *  Logic: '<S33>/AND3'\r\n   *  RelationalOperator: '<S33>/Equal1'\r\n   *  RelationalOperator: '<S33>/Relational Operator'\r\n   *  Switch: '<S33>/Switch1'\r\n   *  Switch: '<S33>/Switch2'\r\n   */\r\n  if ((rtb_DeadZone != 0.0F) && (tmp == tmp_0)) {\r\n    rtb_IProdOut_d = 0;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S42>/Integrator' incorporates:\r\n   *  Switch: '<S33>/Switch'\r\n   */\r\n  rtDW.Integrator_DSTATE_l += rtb_IProdOut_d;\r\n\r\n  /* Switch: '<S83>/Switch1' incorporates:\r\n   *  Constant: '<S83>/Clamping_zero'\r\n   *  Constant: '<S83>/Constant'\r\n   *  Constant: '<S83>/Constant2'\r\n   *  RelationalOperator: '<S83>/fix for DT propagation issue'\r\n   */\r\n  if (rtb_DeadZone_j > 0.0F) {\r\n    tmp = 1;\r\n  } else {\r\n    tmp = -1;\r\n  }\r\n\r\n  /* Switch: '<S83>/Switch2' incorporates:\r\n   *  Constant: '<S83>/Clamping_zero'\r\n   *  Constant: '<S83>/Constant3'\r\n   *  Constant: '<S83>/Constant4'\r\n   *  RelationalOperator: '<S83>/fix for DT propagation issue1'\r\n   */\r\n  if (rtb_IProdOut > 0.0F) {\r\n    tmp_0 = 1;\r\n  } else {\r\n    tmp_0 = -1;\r\n  }\r\n\r\n  /* Switch: '<S83>/Switch' incorporates:\r\n   *  Constant: '<S83>/Clamping_zero'\r\n   *  Constant: '<S83>/Constant1'\r\n   *  Logic: '<S83>/AND3'\r\n   *  RelationalOperator: '<S83>/Equal1'\r\n   *  RelationalOperator: '<S83>/Relational Operator'\r\n   *  Switch: '<S83>/Switch1'\r\n   *  Switch: '<S83>/Switch2'\r\n   */\r\n  if ((rtb_DeadZone_j != 0.0F) && (tmp == tmp_0)) {\r\n    rtb_IProdOut = 0.0F;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S92>/Integrator' incorporates:\r\n   *  Switch: '<S83>/Switch'\r\n   */\r\n  rtDW.Integrator_DSTATE += 0.0001F * rtb_IProdOut;\r\n\r\n  /* Outport: '<Root>/Duty' incorporates:\r\n   *  Constant: '<S6>/Constant'\r\n   *  Gain: '<S6>/Gain'\r\n   *  Inport: '<Root>/T_pwm'\r\n   *  Product: '<S109>/Divide2'\r\n   *  Sum: '<S6>/Sum'\r\n   */\r\n  rtY.Duty[0] = 1.0 - 2.0F * rtb_Divide_i;\r\n  rtY.Duty[1] = 1.0 - rtb_Add2 / rtU.T_pwm * 2.0F;\r\n  rtY.Duty[2] = 1.0 - 2.0F * rtb_Divide1;\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/Currloop_Mode' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Currloop_Mode_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Currloop_Mode.h","type":"header","group":"model","path":"E:\\STM32SSC\\STM32\\STM32SSC_Engine\\Code\\Test_Code\\4_PMSM\\1_FOC\\3_IF\\Mode\\IF\\Currloop_Mode_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: Currloop_Mode.h\r\n *\r\n * Code generated for Simulink model 'Currloop_Mode'.\r\n *\r\n * Model version                  : 1.6\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Aug 15 17:06:22 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Currloop_Mode_h_\r\n#define RTW_HEADER_Currloop_Mode_h_\r\n#ifndef Currloop_Mode_COMMON_INCLUDES_\r\n#define Currloop_Mode_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* Currloop_Mode_COMMON_INCLUDES_ */\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real32_T Integrator_DSTATE;          /* '<S92>/Integrator' */\r\n  int16_T Integrator_DSTATE_l;         /* '<S42>/Integrator' */\r\n} DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real32_T I_a;                        /* '<Root>/I_a' */\r\n  real32_T I_b;                        /* '<Root>/I_b' */\r\n  real32_T I_c;                        /* '<Root>/I_c' */\r\n  real32_T electric_theta;             /* '<Root>/electric_theta' */\r\n  real32_T iq_ref;                     /* '<Root>/iq_ref' */\r\n  real32_T T_pwm;                      /* '<Root>/T_pwm' */\r\n  real32_T u_dc;                       /* '<Root>/u_dc' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T Duty[3];                      /* '<Root>/Duty' */\r\n} ExtY;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/*\r\n * Exported Global Signals\r\n *\r\n * Note: Exported global signals are block signals with an exported global\r\n * storage class designation.  Code generation will declare the memory for\r\n * these signals and export their symbols.\r\n *\r\n */\r\nextern real32_T i_alpha;               /* '<S3>/Add2' */\r\nextern real32_T i_beta;                /* '<S3>/Gain2' */\r\nextern real32_T i_d;                   /* '<S5>/Add' */\r\nextern real32_T i_q;                   /* '<S5>/Add1' */\r\n\r\n/* Model entry point functions */\r\nextern void Currloop_Mode_initialize(void);\r\nextern void Currloop_Mode_step(void);\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S2>/Scope' : Unused code path elimination\r\n * Block '<S4>/Scope' : Unused code path elimination\r\n * Block '<S5>/Scope' : Unused code path elimination\r\n * Block '<S109>/Scope' : Unused code path elimination\r\n * Block '<S109>/Scope1' : Unused code path elimination\r\n * Block '<S110>/Scope' : Unused code path elimination\r\n * Block '<S111>/Scope' : Unused code path elimination\r\n * Block '<S111>/Scope1' : Unused code path elimination\r\n * Block '<S112>/Scope' : Unused code path elimination\r\n * Block '<S1>/Scope1' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('if_mode/Currloop_Mode')    - opens subsystem if_mode/Currloop_Mode\r\n * hilite_system('if_mode/Currloop_Mode/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'if_mode'\r\n * '<S1>'   : 'if_mode/Currloop_Mode'\r\n * '<S2>'   : 'if_mode/Currloop_Mode/AntiPark'\r\n * '<S3>'   : 'if_mode/Currloop_Mode/Clark'\r\n * '<S4>'   : 'if_mode/Currloop_Mode/Curr_PI_Controller'\r\n * '<S5>'   : 'if_mode/Currloop_Mode/Park'\r\n * '<S6>'   : 'if_mode/Currloop_Mode/SVPWM'\r\n * '<S7>'   : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1'\r\n * '<S8>'   : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2'\r\n * '<S9>'   : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Anti-windup'\r\n * '<S10>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/D Gain'\r\n * '<S11>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Filter'\r\n * '<S12>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Filter ICs'\r\n * '<S13>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/I Gain'\r\n * '<S14>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Ideal P Gain'\r\n * '<S15>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Ideal P Gain Fdbk'\r\n * '<S16>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Integrator'\r\n * '<S17>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Integrator ICs'\r\n * '<S18>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/N Copy'\r\n * '<S19>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/N Gain'\r\n * '<S20>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/P Copy'\r\n * '<S21>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Parallel P Gain'\r\n * '<S22>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Reset Signal'\r\n * '<S23>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Saturation'\r\n * '<S24>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Saturation Fdbk'\r\n * '<S25>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Sum'\r\n * '<S26>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Sum Fdbk'\r\n * '<S27>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Tracking Mode'\r\n * '<S28>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Tracking Mode Sum'\r\n * '<S29>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Tsamp - Integral'\r\n * '<S30>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Tsamp - Ngain'\r\n * '<S31>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/postSat Signal'\r\n * '<S32>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/preSat Signal'\r\n * '<S33>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Anti-windup/Disc. Clamping Parallel'\r\n * '<S34>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S35>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S36>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/D Gain/Disabled'\r\n * '<S37>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Filter/Disabled'\r\n * '<S38>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Filter ICs/Disabled'\r\n * '<S39>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/I Gain/External Parameters'\r\n * '<S40>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Ideal P Gain/Passthrough'\r\n * '<S41>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Ideal P Gain Fdbk/Disabled'\r\n * '<S42>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Integrator/Discrete'\r\n * '<S43>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Integrator ICs/Internal IC'\r\n * '<S44>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/N Copy/Disabled wSignal Specification'\r\n * '<S45>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/N Gain/Disabled'\r\n * '<S46>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/P Copy/Disabled'\r\n * '<S47>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Parallel P Gain/External Parameters'\r\n * '<S48>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Reset Signal/Disabled'\r\n * '<S49>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Saturation/Enabled'\r\n * '<S50>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Saturation Fdbk/Disabled'\r\n * '<S51>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Sum/Sum_PI'\r\n * '<S52>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Sum Fdbk/Disabled'\r\n * '<S53>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Tracking Mode/Disabled'\r\n * '<S54>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Tracking Mode Sum/Passthrough'\r\n * '<S55>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Tsamp - Integral/Passthrough'\r\n * '<S56>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/Tsamp - Ngain/Passthrough'\r\n * '<S57>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/postSat Signal/Forward_Path'\r\n * '<S58>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller1/preSat Signal/Forward_Path'\r\n * '<S59>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Anti-windup'\r\n * '<S60>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/D Gain'\r\n * '<S61>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Filter'\r\n * '<S62>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Filter ICs'\r\n * '<S63>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/I Gain'\r\n * '<S64>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Ideal P Gain'\r\n * '<S65>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Ideal P Gain Fdbk'\r\n * '<S66>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Integrator'\r\n * '<S67>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Integrator ICs'\r\n * '<S68>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/N Copy'\r\n * '<S69>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/N Gain'\r\n * '<S70>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/P Copy'\r\n * '<S71>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Parallel P Gain'\r\n * '<S72>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Reset Signal'\r\n * '<S73>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Saturation'\r\n * '<S74>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Saturation Fdbk'\r\n * '<S75>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Sum'\r\n * '<S76>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Sum Fdbk'\r\n * '<S77>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Tracking Mode'\r\n * '<S78>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Tracking Mode Sum'\r\n * '<S79>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Tsamp - Integral'\r\n * '<S80>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Tsamp - Ngain'\r\n * '<S81>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/postSat Signal'\r\n * '<S82>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/preSat Signal'\r\n * '<S83>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Anti-windup/Disc. Clamping Parallel'\r\n * '<S84>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S85>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S86>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/D Gain/Disabled'\r\n * '<S87>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Filter/Disabled'\r\n * '<S88>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Filter ICs/Disabled'\r\n * '<S89>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/I Gain/External Parameters'\r\n * '<S90>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Ideal P Gain/Passthrough'\r\n * '<S91>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Ideal P Gain Fdbk/Disabled'\r\n * '<S92>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Integrator/Discrete'\r\n * '<S93>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Integrator ICs/Internal IC'\r\n * '<S94>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/N Copy/Disabled wSignal Specification'\r\n * '<S95>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/N Gain/Disabled'\r\n * '<S96>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/P Copy/Disabled'\r\n * '<S97>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Parallel P Gain/External Parameters'\r\n * '<S98>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Reset Signal/Disabled'\r\n * '<S99>'  : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Saturation/Enabled'\r\n * '<S100>' : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Saturation Fdbk/Disabled'\r\n * '<S101>' : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Sum/Sum_PI'\r\n * '<S102>' : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Sum Fdbk/Disabled'\r\n * '<S103>' : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Tracking Mode/Disabled'\r\n * '<S104>' : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Tracking Mode Sum/Passthrough'\r\n * '<S105>' : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Tsamp - Integral/Passthrough'\r\n * '<S106>' : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/Tsamp - Ngain/Passthrough'\r\n * '<S107>' : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/postSat Signal/Forward_Path'\r\n * '<S108>' : 'if_mode/Currloop_Mode/Curr_PI_Controller/PID Controller2/preSat Signal/Forward_Path'\r\n * '<S109>' : 'if_mode/Currloop_Mode/SVPWM/Duty_Caculator'\r\n * '<S110>' : 'if_mode/Currloop_Mode/SVPWM/Sector_Select'\r\n * '<S111>' : 'if_mode/Currloop_Mode/SVPWM/T4_T6_Caculator'\r\n * '<S112>' : 'if_mode/Currloop_Mode/SVPWM/X_Y_Z_Caculator'\r\n */\r\n#endif                                 /* RTW_HEADER_Currloop_Mode_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"E:\\STM32SSC\\STM32\\STM32SSC_Engine\\Code\\Test_Code\\4_PMSM\\1_FOC\\3_IF\\Mode\\IF\\Currloop_Mode_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Currloop_Mode'.\r\n *\r\n * Model version                  : 1.6\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Aug 15 17:06:22 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":false,"showJustificationLinks":false,"showProfilingInfo":false,"showTaskSummary":false}};