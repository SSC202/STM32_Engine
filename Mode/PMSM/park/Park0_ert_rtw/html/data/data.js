var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"park/Park","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\park\\Park0_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'Park0'.\r\n *\r\n * Model version                  : 1.5\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Oct 25 13:24:28 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"Park0.h\"                     /* Model's header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  Park0_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example \"main\" function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific.  This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  Park0_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (the model's base sample time) here.  The\r\n   * call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (1) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* The option 'Remove error status field in real-time model data structure'\r\n   * is selected, therefore the following code does not need to execute.\r\n   */\r\n#if 0\r\n\r\n  /* Disable rt_OneStep here */\r\n#endif\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Park0.c","type":"source","group":"model","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\park\\Park0_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: Park0.c\r\n *\r\n * Code generated for Simulink model 'Park0'.\r\n *\r\n * Model version                  : 1.5\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Oct 25 13:24:28 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Park0.h\"\r\n\r\n/* Exported block signals */\r\nreal32_T ia;                           /* '<S6>/Sin' */\r\nreal32_T ib;                           /* '<S6>/Sin1' */\r\nreal32_T ic;                           /* '<S6>/Sin2' */\r\nreal32_T ialpha;                       /* '<S3>/Add1' */\r\nreal32_T ibeta;                        /* '<S3>/Gain2' */\r\nreal32_T id;                           /* '<S5>/Subtract' */\r\nreal32_T iq;                           /* '<S5>/Subtract1' */\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\nextern real32_T rt_modf(real32_T u0, real32_T u1);\r\nstatic void IfActionSubsystem1(real32_T rtu_In1, real32_T *rty_Out1);\r\nstatic void IfActionSubsystem3(real32_T rtu_In1, real32_T *rty_Out1);\r\n\r\n/*\r\n * Output and update for action system:\r\n *    '<S7>/If Action Subsystem1'\r\n *    '<S12>/If Action Subsystem1'\r\n */\r\nstatic void IfActionSubsystem1(real32_T rtu_In1, real32_T *rty_Out1)\r\n{\r\n  /* Sum: '<S8>/Sum' incorporates:\r\n   *  Constant: '<S8>/Constant'\r\n   */\r\n  *rty_Out1 = rtu_In1 - 6.28318548F;\r\n}\r\n\r\n/*\r\n * Output and update for action system:\r\n *    '<S7>/If Action Subsystem3'\r\n *    '<S12>/If Action Subsystem3'\r\n */\r\nstatic void IfActionSubsystem3(real32_T rtu_In1, real32_T *rty_Out1)\r\n{\r\n  /* Sum: '<S10>/Sum' incorporates:\r\n   *  Constant: '<S10>/Constant'\r\n   */\r\n  *rty_Out1 = rtu_In1 + 6.28318548F;\r\n}\r\n\r\nreal32_T rt_modf(real32_T u0, real32_T u1)\r\n{\r\n  real32_T y;\r\n  y = u0;\r\n  if (u1 == 0.0F) {\r\n    if (u0 == 0.0F) {\r\n      y = u1;\r\n    }\r\n  } else if (u0 == 0.0F) {\r\n    y = 0.0F / u1;\r\n  } else {\r\n    boolean_T yEq;\r\n    y = fmodf(u0, u1);\r\n    yEq = (y == 0.0F);\r\n    if ((!yEq) && (u1 > floorf(u1))) {\r\n      real32_T q;\r\n      q = fabsf(u0 / u1);\r\n      yEq = (fabsf(q - floorf(q + 0.5F)) <= FLT_EPSILON * q);\r\n    }\r\n\r\n    if (yEq) {\r\n      y = 0.0F;\r\n    } else if ((u0 < 0.0F) != (u1 < 0.0F)) {\r\n      y += u1;\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Model step function */\r\nvoid Park0_step(void)\r\n{\r\n  real32_T rtb_Merge_g;\r\n  real32_T rtb_SinCos;\r\n  real32_T rtb_Sum;\r\n  real32_T rtb_Sum_p;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/Park' */\r\n  /* Sum: '<S4>/Sum' incorporates:\r\n   *  UnitDelay: '<S4>/Unit Delay'\r\n   */\r\n  rtb_Sum = rtDW.UnitDelay_DSTATE + 0.000628318521F;\r\n\r\n  /* If: '<S7>/If' incorporates:\r\n   *  Constant: '<S7>/Constant'\r\n   *  Constant: '<S7>/Constant1'\r\n   *  Inport: '<S9>/In1'\r\n   *  RelationalOperator: '<S7>/Relational Operator'\r\n   *  RelationalOperator: '<S7>/Relational Operator1'\r\n   *  Sum: '<S4>/Sum'\r\n   *  UnitDelay: '<S4>/Unit Delay'\r\n   */\r\n  if (rtDW.UnitDelay_DSTATE + 0.000628318521F > 6.28318548F) {\r\n    /* Outputs for IfAction SubSystem: '<S7>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S8>/Action Port'\r\n     */\r\n    IfActionSubsystem1(rtDW.UnitDelay_DSTATE + 0.000628318521F, &rtb_Merge_g);\r\n\r\n    /* End of Outputs for SubSystem: '<S7>/If Action Subsystem1' */\r\n  } else if (rtDW.UnitDelay_DSTATE + 0.000628318521F < 0.0F) {\r\n    /* Outputs for IfAction SubSystem: '<S7>/If Action Subsystem3' incorporates:\r\n     *  ActionPort: '<S10>/Action Port'\r\n     */\r\n    IfActionSubsystem3(rtDW.UnitDelay_DSTATE + 0.000628318521F, &rtb_Merge_g);\r\n\r\n    /* End of Outputs for SubSystem: '<S7>/If Action Subsystem3' */\r\n  } else {\r\n    /* Outputs for IfAction SubSystem: '<S7>/If Action Subsystem2' incorporates:\r\n     *  ActionPort: '<S9>/Action Port'\r\n     */\r\n    rtb_Merge_g = rtDW.UnitDelay_DSTATE + 0.000628318521F;\r\n\r\n    /* End of Outputs for SubSystem: '<S7>/If Action Subsystem2' */\r\n  }\r\n\r\n  /* End of If: '<S7>/If' */\r\n\r\n  /* If: '<S12>/If' incorporates:\r\n   *  Constant: '<S12>/Constant'\r\n   *  Constant: '<S12>/Constant1'\r\n   *  Inport: '<S14>/In1'\r\n   *  RelationalOperator: '<S12>/Relational Operator'\r\n   *  RelationalOperator: '<S12>/Relational Operator1'\r\n   *  Sum: '<S11>/Sum'\r\n   *  UnitDelay: '<S11>/Unit Delay'\r\n   */\r\n  if (rtDW.UnitDelay_DSTATE_j + 0.000628318521F > 6.28318548F) {\r\n    /* Outputs for IfAction SubSystem: '<S12>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S13>/Action Port'\r\n     */\r\n    IfActionSubsystem1(rtDW.UnitDelay_DSTATE_j + 0.000628318521F, &rtb_Sum);\r\n\r\n    /* End of Outputs for SubSystem: '<S12>/If Action Subsystem1' */\r\n  } else if (rtDW.UnitDelay_DSTATE_j + 0.000628318521F < 0.0F) {\r\n    /* Outputs for IfAction SubSystem: '<S12>/If Action Subsystem3' incorporates:\r\n     *  ActionPort: '<S15>/Action Port'\r\n     */\r\n    IfActionSubsystem3(rtDW.UnitDelay_DSTATE_j + 0.000628318521F, &rtb_Sum);\r\n\r\n    /* End of Outputs for SubSystem: '<S12>/If Action Subsystem3' */\r\n  } else {\r\n    /* Outputs for IfAction SubSystem: '<S12>/If Action Subsystem2' incorporates:\r\n     *  ActionPort: '<S14>/Action Port'\r\n     */\r\n    rtb_Sum = rtDW.UnitDelay_DSTATE_j + 0.000628318521F;\r\n\r\n    /* End of Outputs for SubSystem: '<S12>/If Action Subsystem2' */\r\n  }\r\n\r\n  /* End of If: '<S12>/If' */\r\n\r\n  /* Trigonometry: '<S6>/Sin' incorporates:\r\n   *  Constant: '<S6>/Constant'\r\n   *  Gain: '<S6>/Gain'\r\n   *  Math: '<S6>/Mod'\r\n   *  Sum: '<S6>/Add1'\r\n   */\r\n  ia = arm_sin_f32(-rt_modf(rtb_Sum, 6.28318548F));\r\n\r\n  /* Trigonometry: '<S6>/Sin1' incorporates:\r\n   *  Constant: '<S6>/Constant'\r\n   *  Constant: '<S6>/Constant1'\r\n   *  Gain: '<S6>/Gain1'\r\n   *  Math: '<S6>/Mod3'\r\n   *  Sum: '<S6>/Add2'\r\n   */\r\n  ib = arm_sin_f32(-rt_modf(rtb_Sum + -2.09439516F, 6.28318548F));\r\n\r\n  /* Trigonometry: '<S6>/Sin2' incorporates:\r\n   *  Constant: '<S6>/Constant'\r\n   *  Constant: '<S6>/Constant3'\r\n   *  Gain: '<S6>/Gain2'\r\n   *  Math: '<S6>/Mod4'\r\n   *  Sum: '<S6>/Add3'\r\n   */\r\n  ic = arm_sin_f32(-rt_modf(rtb_Sum + 2.09439516F, 6.28318548F));\r\n\r\n  /* Sum: '<S3>/Add1' incorporates:\r\n   *  Gain: '<S3>/Gain'\r\n   *  Gain: '<S3>/Gain1'\r\n   *  Sum: '<S3>/Add'\r\n   */\r\n  ialpha = 0.666666687F * ia - (ib + ic) * 0.333333343F;\r\n\r\n  /* Trigonometry: '<S1>/SinCos1' */\r\n  rtb_Sum_p = arm_cos_f32(rtb_Merge_g);\r\n\r\n  /* Gain: '<S3>/Gain2' incorporates:\r\n   *  Sum: '<S3>/Add2'\r\n   */\r\n  ibeta = (ib - ic) * 0.577350259F;\r\n\r\n  /* Trigonometry: '<S1>/SinCos' */\r\n  rtb_SinCos = arm_sin_f32(rtb_Merge_g);\r\n\r\n  /* Sum: '<S5>/Subtract' incorporates:\r\n   *  Product: '<S5>/Product'\r\n   *  Product: '<S5>/Product1'\r\n   */\r\n  id = ialpha * rtb_Sum_p + ibeta * rtb_SinCos;\r\n\r\n  /* Sum: '<S5>/Subtract1' incorporates:\r\n   *  Product: '<S5>/Product2'\r\n   *  Product: '<S5>/Product3'\r\n   */\r\n  iq = ibeta * rtb_Sum_p - ialpha * rtb_SinCos;\r\n\r\n  /* Update for UnitDelay: '<S4>/Unit Delay' */\r\n  rtDW.UnitDelay_DSTATE = rtb_Merge_g;\r\n\r\n  /* Update for UnitDelay: '<S11>/Unit Delay' */\r\n  rtDW.UnitDelay_DSTATE_j = rtb_Sum;\r\n\r\n  /* Outport: '<Root>/ualpha' incorporates:\r\n   *  Product: '<S2>/Product'\r\n   *  Product: '<S2>/Product1'\r\n   *  Sum: '<S2>/Subtract'\r\n   */\r\n  rtY.ualpha = id * rtb_Sum_p - iq * rtb_SinCos;\r\n\r\n  /* Outport: '<Root>/ubeta' incorporates:\r\n   *  Product: '<S2>/Product2'\r\n   *  Product: '<S2>/Product3'\r\n   *  Sum: '<S2>/Subtract1'\r\n   */\r\n  rtY.ubeta = id * rtb_SinCos + iq * rtb_Sum_p;\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/Park' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Park0_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Park0.h","type":"header","group":"model","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\park\\Park0_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: Park0.h\r\n *\r\n * Code generated for Simulink model 'Park0'.\r\n *\r\n * Model version                  : 1.5\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Oct 25 13:24:28 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Park0_h_\r\n#define RTW_HEADER_Park0_h_\r\n#include <float.h>\r\n#include <math.h>\r\n#ifndef Park0_COMMON_INCLUDES_\r\n#define Park0_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* Park0_COMMON_INCLUDES_ */\r\n\r\n/* Model Code Variants */\r\n#include \"mw_cmsis.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real32_T UnitDelay_DSTATE;           /* '<S4>/Unit Delay' */\r\n  real32_T UnitDelay_DSTATE_j;         /* '<S11>/Unit Delay' */\r\n} DW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real32_T ualpha;                     /* '<Root>/ualpha' */\r\n  real32_T ubeta;                      /* '<Root>/ubeta' */\r\n} ExtY;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/*\r\n * Exported Global Signals\r\n *\r\n * Note: Exported global signals are block signals with an exported global\r\n * storage class designation.  Code generation will declare the memory for\r\n * these signals and export their symbols.\r\n *\r\n */\r\nextern real32_T ia;                    /* '<S6>/Sin' */\r\nextern real32_T ib;                    /* '<S6>/Sin1' */\r\nextern real32_T ic;                    /* '<S6>/Sin2' */\r\nextern real32_T ialpha;                /* '<S3>/Add1' */\r\nextern real32_T ibeta;                 /* '<S3>/Gain2' */\r\nextern real32_T id;                    /* '<S5>/Subtract' */\r\nextern real32_T iq;                    /* '<S5>/Subtract1' */\r\n\r\n/* Model entry point functions */\r\nextern void Park0_initialize(void);\r\nextern void Park0_step(void);\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S1>/Scope' : Unused code path elimination\r\n * Block '<S1>/Scope2' : Unused code path elimination\r\n * Block '<S6>/Scope1' : Unused code path elimination\r\n * Block '<S1>/Data Type Conversion3' : Eliminate redundant data type conversion\r\n * Block '<S1>/Data Type Conversion4' : Eliminate redundant data type conversion\r\n * Block '<S6>/Data Type Conversion' : Eliminate redundant data type conversion\r\n * Block '<S6>/Data Type Conversion1' : Eliminate redundant data type conversion\r\n * Block '<S6>/Data Type Conversion2' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('park/Park')    - opens subsystem park/Park\r\n * hilite_system('park/Park/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'park'\r\n * '<S1>'   : 'park/Park'\r\n * '<S2>'   : 'park/Park/AntiPark'\r\n * '<S3>'   : 'park/Park/Clark'\r\n * '<S4>'   : 'park/Park/FreqGenerator'\r\n * '<S5>'   : 'park/Park/Park'\r\n * '<S6>'   : 'park/Park/ThreeCurrentGenerator'\r\n * '<S7>'   : 'park/Park/FreqGenerator/RangeLimit'\r\n * '<S8>'   : 'park/Park/FreqGenerator/RangeLimit/If Action Subsystem1'\r\n * '<S9>'   : 'park/Park/FreqGenerator/RangeLimit/If Action Subsystem2'\r\n * '<S10>'  : 'park/Park/FreqGenerator/RangeLimit/If Action Subsystem3'\r\n * '<S11>'  : 'park/Park/ThreeCurrentGenerator/FreqGenerator'\r\n * '<S12>'  : 'park/Park/ThreeCurrentGenerator/FreqGenerator/RangeLimit'\r\n * '<S13>'  : 'park/Park/ThreeCurrentGenerator/FreqGenerator/RangeLimit/If Action Subsystem1'\r\n * '<S14>'  : 'park/Park/ThreeCurrentGenerator/FreqGenerator/RangeLimit/If Action Subsystem2'\r\n * '<S15>'  : 'park/Park/ThreeCurrentGenerator/FreqGenerator/RangeLimit/If Action Subsystem3'\r\n */\r\n#endif                                 /* RTW_HEADER_Park0_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\park\\Park0_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Park0'.\r\n *\r\n * Model version                  : 1.5\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Oct 25 13:24:28 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mw_cmsis.h","type":"header","group":"other","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\park\\Park0_ert_rtw","tag":"","groupDisplay":"Other files","code":"/* Copyright 2015-2021 The MathWorks, Inc. */\r\n\r\n/****************************************************\r\n*                                                   *   \r\n* Wrapper functions for CMSIS functions             *\r\n*                                                   *  \r\n****************************************************/\r\n\r\n#ifndef MW_CMSIS_H\r\n#define MW_CMSIS_H\r\n\r\n#include \"arm_math.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n#define mw_arm_abs_f32(pSrc, pDst, blockSize) arm_abs_f32((float32_t *)pSrc, (float32_t *)pDst, blockSize)\r\n#define mw_arm_abs_q7(pSrc, pDst, blockSize) arm_abs_q7((q7_t *)pSrc, (q7_t *)pDst, blockSize) \r\n#define mw_arm_abs_q15(pSrc, pDst, blockSize) arm_abs_q15((q15_t *)pSrc, (q15_t *)pDst, blockSize) \r\n#define mw_arm_abs_q31(pSrc, pDst, blockSize) arm_abs_q31((q31_t *)pSrc, (q31_t *)pDst, blockSize) \r\n\r\n#define mw_arm_sqrt_q15(in, pOut) arm_sqrt_q15((q15_t)in,(q15_t *)pOut)\r\n#define mw_arm_sqrt_q31(in, pOut) arm_sqrt_q31((q31_t)in,(q31_t *)pOut)\r\n#define mw_arm_sqrt_f32(in, pOut) arm_sqrt_f32((float32_t)in,(float32_t *)pOut)\r\n\r\n#define mw_arm_float_to_q31(pSrc, pDst, blockSize) arm_float_to_q31((float32_t *)pSrc, (q31_t *)pDst, blockSize)\r\n#define mw_arm_float_to_q15(pSrc, pDst, blockSize) arm_float_to_q15((float32_t *)pSrc, (q15_t *)pDst, blockSize)\r\n#define mw_arm_float_to_q7(pSrc, pDst, blockSize) arm_float_to_q7((float32_t *)pSrc, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_q15_to_float(pSrc, pDst, blockSize) arm_q15_to_float((q15_t *)pSrc, (float32_t *)pDst, blockSize)\r\n#define mw_arm_q15_to_q31(pSrc, pDst, blockSize) arm_q15_to_q31((q15_t *)pSrc, (q31_t *)pDst, blockSize)\r\n#define mw_arm_q15_to_q7(pSrc, pDst, blockSize) arm_q15_to_q7((q15_t *)pSrc, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_q31_to_float(pSrc, pDst, blockSize) arm_q31_to_float((q31_t *)pSrc, (float32_t *)pDst, blockSize)\r\n#define mw_arm_q31_to_q15(pSrc, pDst, blockSize) arm_q31_to_q15((q31_t *)pSrc, (q15_t *)pDst, blockSize)\r\n#define mw_arm_q31_to_q7(pSrc, pDst, blockSize) arm_q31_to_q7((q31_t *)pSrc, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_q7_to_float(pSrc, pDst, blockSize) arm_q7_to_float((q7_t *)pSrc, (float32_t *)pDst, blockSize)\r\n#define mw_arm_q7_to_q31(pSrc, pDst, blockSize) arm_q7_to_q31((q7_t *)pSrc, (q31_t *)pDst, blockSize)\r\n#define mw_arm_q7_to_q15(pSrc, pDst, blockSize) arm_q7_to_q15((q7_t *)pSrc, (q15_t *)pDst, blockSize)\r\n\r\n#define mw_arm_add_f32(pSrcA, pSrcB, pDst, blockSize) arm_add_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_add_q31(pSrcA, pSrcB, pDst, blockSize) arm_add_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_add_q15(pSrcA, pSrcB, pDst, blockSize) arm_add_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n#define mw_arm_add_q7(pSrcA, pSrcB, pDst, blockSize)  arm_add_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_sub_f32(pSrcA, pSrcB, pDst, blockSize) arm_sub_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_sub_q31(pSrcA, pSrcB, pDst, blockSize) arm_sub_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_sub_q15(pSrcA, pSrcB, pDst, blockSize) arm_sub_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n#define mw_arm_sub_q7(pSrcA, pSrcB, pDst, blockSize)  arm_sub_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_mult_f32(pSrcA, pSrcB, pDst, blockSize) arm_mult_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_mult_q31(pSrcA, pSrcB, pDst, blockSize) arm_mult_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_mult_q15(pSrcA, pSrcB, pDst, blockSize) arm_mult_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n#define mw_arm_mult_q7(pSrcA, pSrcB, pDst, blockSize)  arm_mult_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_cmplx_conj_f32(pSrc, pDst, numSamples) arm_cmplx_conj_f32((float32_t *)pSrc, (float32_t *)pDst, numSamples)\r\n#define mw_arm_cmplx_conj_q31(pSrc, pDst, numSamples) arm_cmplx_conj_q31((q31_t *)pSrc, (q31_t *)pDst, numSamples)\r\n#define mw_arm_cmplx_conj_q15(pSrc, pDst, numSamples) arm_cmplx_conj_q15((q15_t *)pSrc, (q15_t *)pDst, numSamples)\r\n\r\n#define mw_arm_cmplx_mult_cmplx_f32(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_cmplx_mult_cmplx_q31(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_cmplx_mult_cmplx_q15(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n\r\n#define mw_arm_cmplx_mult_real_f32(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_cmplx_mult_real_q31(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_cmplx_mult_real_q15(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n\r\n#define mw_arm_rshift_q15(pSrc, shiftBits, pDst, blockSize) arm_shift_q15 ((q15_t *)pSrc, -(shiftBits),(q15_t *)pDst, blockSize)\r\n#define mw_arm_rshift_q31(pSrc, shiftBits, pDst, blockSize) arm_shift_q31 ((q31_t *)pSrc, -(shiftBits), (q31_t *)pDst, blockSize)\r\n#define mw_arm_rshift_q7(pSrc, shiftBits, pDst, blockSize) arm_shift_q7 ((q7_t *)pSrc,  -(shiftBits), (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_shift_q15(pSrc, shiftBits, pDst, blockSize) arm_shift_q15 ((q15_t *)pSrc, shiftBits,(q15_t *)pDst, blockSize)\r\n#define mw_arm_shift_q31(pSrc, shiftBits, pDst, blockSize) arm_shift_q31 ((q31_t *)pSrc, shiftBits, (q31_t *)pDst, blockSize)\r\n#define mw_arm_shift_q7(pSrc, shiftBits, pDst, blockSize) arm_shift_q7 ((q7_t *)pSrc, shiftBits, (q7_t *)pDst, blockSize)\r\n\r\n#endif\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};