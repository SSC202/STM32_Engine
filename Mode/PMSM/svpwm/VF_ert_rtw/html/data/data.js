var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"svpwm/FOC_Openloop/VF","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\svpwm\\VF_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'VF'.\r\n *\r\n * Model version                  : 1.9\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Oct 25 22:40:40 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"VF.h\"                        /* Model's header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  VF_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example \"main\" function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific.  This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  VF_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (the model's base sample time) here.  The\r\n   * call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* Disable rt_OneStep here */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"VF.c","type":"source","group":"model","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\svpwm\\VF_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: VF.c\r\n *\r\n * Code generated for Simulink model 'VF'.\r\n *\r\n * Model version                  : 1.9\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Oct 25 22:40:40 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"VF.h\"\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\n\r\n/* Model step function */\r\nvoid VF_step(void)\r\n{\r\n  real_T rtb_MathFunction;\r\n  real_T rtb_MathFunction_h;\r\n  real_T rtb_MultiportSwitch;\r\n  real_T rtb_MultiportSwitch1;\r\n  real_T rtb_MultiportSwitch1_l;\r\n  real_T rtb_Subtract1_l;\r\n  int32_T rtb_Subtract2;\r\n  real32_T rtb_MathFunction_j;\r\n  real32_T rtb_SinCos4;\r\n  real32_T rtb_Sum;\r\n\r\n  /* Sum: '<S4>/Sum' incorporates:\r\n   *  Gain: '<S4>/Gain'\r\n   *  Inport: '<Root>/Freq'\r\n   *  UnitDelay: '<S4>/Unit Delay'\r\n   */\r\n  rtb_Sum = (real32_T)(0.00062831853071795862 * rtU.Freq) +\r\n    rtDW.UnitDelay_DSTATE;\r\n\r\n  /* If: '<S6>/If' incorporates:\r\n   *  Constant: '<S6>/Constant'\r\n   *  Constant: '<S6>/Constant1'\r\n   *  RelationalOperator: '<S6>/Relational Operator'\r\n   *  RelationalOperator: '<S6>/Relational Operator1'\r\n   */\r\n  if (rtb_Sum > 6.28318548F) {\r\n    /* Outputs for IfAction SubSystem: '<S6>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S7>/Action Port'\r\n     */\r\n    /* Sum: '<S7>/Sum' incorporates:\r\n     *  Constant: '<S7>/Constant'\r\n     */\r\n    rtb_Sum -= 6.28318548F;\r\n\r\n    /* End of Outputs for SubSystem: '<S6>/If Action Subsystem1' */\r\n  } else if (rtb_Sum < 0.0F) {\r\n    /* Outputs for IfAction SubSystem: '<S6>/If Action Subsystem3' incorporates:\r\n     *  ActionPort: '<S9>/Action Port'\r\n     */\r\n    /* Sum: '<S9>/Sum' incorporates:\r\n     *  Constant: '<S9>/Constant'\r\n     */\r\n    rtb_Sum += 6.28318548F;\r\n\r\n    /* End of Outputs for SubSystem: '<S6>/If Action Subsystem3' */\r\n  }\r\n\r\n  /* End of If: '<S6>/If' */\r\n\r\n  /* Trigonometry: '<S1>/SinCos4' */\r\n  rtb_SinCos4 = arm_sin_f32(rtb_Sum);\r\n\r\n  /* Trigonometry: '<S1>/SinCos5' */\r\n  rtb_MathFunction_j = arm_cos_f32(rtb_Sum);\r\n\r\n  /* Sum: '<S2>/Subtract1' incorporates:\r\n   *  Inport: '<Root>/ud'\r\n   *  Inport: '<Root>/uq'\r\n   *  Product: '<S2>/Product2'\r\n   *  Product: '<S2>/Product3'\r\n   */\r\n  rtb_Subtract1_l = rtU.ud * rtb_SinCos4 + rtU.uq * rtb_MathFunction_j;\r\n\r\n  /* Sum: '<S2>/Subtract' incorporates:\r\n   *  Inport: '<Root>/ud'\r\n   *  Inport: '<Root>/uq'\r\n   *  Product: '<S2>/Product'\r\n   *  Product: '<S2>/Product1'\r\n   */\r\n  rtb_MathFunction_h = rtU.ud * rtb_MathFunction_j - rtU.uq * rtb_SinCos4;\r\n\r\n  /* Gain: '<S10>/Gain4' */\r\n  rtb_MultiportSwitch = 0.86602538824081421 * rtb_MathFunction_h;\r\n\r\n  /* Gain: '<S10>/Gain1' */\r\n  rtb_MultiportSwitch1_l = 0.5 * rtb_Subtract1_l;\r\n\r\n  /* Sum: '<S10>/Subtract2' incorporates:\r\n   *  Gain: '<S10>/Gain2'\r\n   *  Gain: '<S10>/Gain3'\r\n   *  Sum: '<S10>/Subtract'\r\n   *  Sum: '<S10>/Subtract1'\r\n   *  Switch: '<S10>/Switch'\r\n   *  Switch: '<S10>/Switch1'\r\n   *  Switch: '<S10>/Switch2'\r\n   */\r\n  rtb_Subtract2 = (((rtb_MultiportSwitch - rtb_MultiportSwitch1_l >= 0.0) << 1)\r\n                   + (rtb_Subtract1_l >= 0.0)) + (((0.0 - rtb_MultiportSwitch) -\r\n    rtb_MultiportSwitch1_l >= 0.0) << 2);\r\n\r\n  /* Math: '<S1>/Math Function' incorporates:\r\n   *  Inport: '<Root>/Freq'\r\n   *\r\n   * About '<S1>/Math Function':\r\n   *  Operator: reciprocal\r\n   */\r\n  rtb_MathFunction = 1.0 / rtU.Freq;\r\n\r\n  /* Gain: '<S13>/Gain2' */\r\n  rtb_MultiportSwitch1 = 0.8660254037844386 * rtb_Subtract1_l;\r\n\r\n  /* Gain: '<S13>/Gain' */\r\n  rtb_MathFunction_h *= 1.5;\r\n\r\n  /* Product: '<S13>/Product' incorporates:\r\n   *  Inport: '<Root>/ubus'\r\n   *  Math: '<S13>/Math Function'\r\n   *\r\n   * About '<S13>/Math Function':\r\n   *  Operator: reciprocal\r\n   */\r\n  rtb_MultiportSwitch1_l = 1.0F / rtU.ubus * rtb_MathFunction;\r\n\r\n  /* MultiPortSwitch: '<S11>/Multiport Switch' incorporates:\r\n   *  Gain: '<S11>/Gain'\r\n   *  Gain: '<S11>/Gain1'\r\n   *  Gain: '<S11>/Gain2'\r\n   *  Gain: '<S13>/Gain1'\r\n   *  Product: '<S13>/Product1'\r\n   *  Product: '<S13>/Product2'\r\n   *  Product: '<S13>/Product3'\r\n   *  Sum: '<S13>/Add'\r\n   *  Sum: '<S13>/Subtract'\r\n   */\r\n  switch (rtb_Subtract2) {\r\n   case 1:\r\n    rtb_MultiportSwitch = (rtb_MultiportSwitch1 - rtb_MathFunction_h) *\r\n      rtb_MultiportSwitch1_l;\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Product: '<S13>/Product2'\r\n     *  Product: '<S13>/Product3'\r\n     *  Sum: '<S13>/Add'\r\n     *  Sum: '<S13>/Subtract'\r\n     */\r\n    rtb_MultiportSwitch1 = (rtb_MultiportSwitch1 + rtb_MathFunction_h) *\r\n      rtb_MultiportSwitch1_l;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_MultiportSwitch = (rtb_MultiportSwitch1 + rtb_MathFunction_h) *\r\n      rtb_MultiportSwitch1_l;\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain1'\r\n     *  Gain: '<S13>/Gain1'\r\n     *  Product: '<S13>/Product1'\r\n     *  Product: '<S13>/Product2'\r\n     *  Sum: '<S13>/Add'\r\n     */\r\n    rtb_MultiportSwitch1 = -(1.7320508075688772 * rtb_Subtract1_l *\r\n      rtb_MultiportSwitch1_l);\r\n    break;\r\n\r\n   case 3:\r\n    rtb_MultiportSwitch = -((rtb_MultiportSwitch1 - rtb_MathFunction_h) *\r\n      rtb_MultiportSwitch1_l);\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain'\r\n     *  Gain: '<S13>/Gain1'\r\n     *  Product: '<S13>/Product1'\r\n     *  Product: '<S13>/Product3'\r\n     *  Sum: '<S13>/Subtract'\r\n     */\r\n    rtb_MultiportSwitch1 = 1.7320508075688772 * rtb_Subtract1_l *\r\n      rtb_MultiportSwitch1_l;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_MultiportSwitch = -(1.7320508075688772 * rtb_Subtract1_l *\r\n      rtb_MultiportSwitch1_l);\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain1'\r\n     *  Gain: '<S13>/Gain1'\r\n     *  Product: '<S13>/Product1'\r\n     *  Product: '<S13>/Product3'\r\n     *  Sum: '<S13>/Subtract'\r\n     */\r\n    rtb_MultiportSwitch1 = (rtb_MultiportSwitch1 - rtb_MathFunction_h) *\r\n      rtb_MultiportSwitch1_l;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_MultiportSwitch = 1.7320508075688772 * rtb_Subtract1_l *\r\n      rtb_MultiportSwitch1_l;\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain2'\r\n     *  Gain: '<S13>/Gain1'\r\n     *  Product: '<S13>/Product1'\r\n     *  Product: '<S13>/Product2'\r\n     *  Sum: '<S13>/Add'\r\n     */\r\n    rtb_MultiportSwitch1 = -((rtb_MultiportSwitch1 + rtb_MathFunction_h) *\r\n      rtb_MultiportSwitch1_l);\r\n    break;\r\n\r\n   default:\r\n    rtb_MultiportSwitch = -((rtb_MultiportSwitch1 + rtb_MathFunction_h) *\r\n      rtb_MultiportSwitch1_l);\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain'\r\n     *  Gain: '<S11>/Gain2'\r\n     *  Product: '<S13>/Product2'\r\n     *  Product: '<S13>/Product3'\r\n     *  Sum: '<S13>/Add'\r\n     *  Sum: '<S13>/Subtract'\r\n     */\r\n    rtb_MultiportSwitch1 = -((rtb_MultiportSwitch1 - rtb_MathFunction_h) *\r\n      rtb_MultiportSwitch1_l);\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S11>/Multiport Switch' */\r\n\r\n  /* Switch: '<S11>/Switch' incorporates:\r\n   *  Product: '<S11>/Divide'\r\n   *  Product: '<S11>/Divide1'\r\n   *  Product: '<S11>/Product'\r\n   *  Product: '<S11>/Product1'\r\n   *  Sum: '<S11>/Add'\r\n   *  Sum: '<S11>/Add1'\r\n   *  Switch: '<S11>/Switch1'\r\n   */\r\n  if ((rtb_MathFunction - rtb_MultiportSwitch) - rtb_MultiportSwitch1 > 0.0) {\r\n    rtb_MultiportSwitch1_l = rtb_MultiportSwitch;\r\n  } else {\r\n    /* Sum: '<S11>/Add' incorporates:\r\n     *  Sum: '<S11>/Add2'\r\n     */\r\n    rtb_Subtract1_l = rtb_MultiportSwitch + rtb_MultiportSwitch1;\r\n    rtb_MultiportSwitch1_l = rtb_MultiportSwitch * rtb_MathFunction /\r\n      rtb_Subtract1_l;\r\n    rtb_MultiportSwitch1 = rtb_MultiportSwitch1 * rtb_MathFunction /\r\n      rtb_Subtract1_l;\r\n  }\r\n\r\n  /* End of Switch: '<S11>/Switch' */\r\n\r\n  /* Gain: '<S12>/Gain1' incorporates:\r\n   *  Sum: '<S12>/Add1'\r\n   */\r\n  rtb_Subtract1_l = ((rtb_MultiportSwitch1_l - rtb_MultiportSwitch1) +\r\n                     rtb_MathFunction) * 0.25;\r\n\r\n  /* Gain: '<S12>/Gain' incorporates:\r\n   *  Sum: '<S12>/Add'\r\n   */\r\n  rtb_MultiportSwitch = ((rtb_MathFunction - rtb_MultiportSwitch1_l) -\r\n    rtb_MultiportSwitch1) * 0.25;\r\n\r\n  /* Gain: '<S12>/Gain2' incorporates:\r\n   *  Sum: '<S12>/Add2'\r\n   */\r\n  rtb_MathFunction_h = ((rtb_MultiportSwitch1_l + rtb_MultiportSwitch1) +\r\n                        rtb_MathFunction) * 0.25;\r\n\r\n  /* MultiPortSwitch: '<S12>/Multiport Switch' incorporates:\r\n   *  Gain: '<S12>/Gain1'\r\n   *  Gain: '<S12>/Gain2'\r\n   *  Sum: '<S12>/Add1'\r\n   *  Sum: '<S12>/Add2'\r\n   */\r\n  switch (rtb_Subtract2) {\r\n   case 1:\r\n    rtb_MultiportSwitch1 = ((rtb_MultiportSwitch1_l - rtb_MultiportSwitch1) +\r\n      rtb_MathFunction) * 0.25;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain'\r\n     *  Gain: '<S12>/Gain1'\r\n     *  Sum: '<S12>/Add1'\r\n     */\r\n    rtb_MultiportSwitch1_l = rtb_MultiportSwitch;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch2' incorporates:\r\n     *  Gain: '<S12>/Gain2'\r\n     */\r\n    rtb_MultiportSwitch = rtb_MathFunction_h;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_MultiportSwitch1 = rtb_MultiportSwitch;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain2'\r\n     */\r\n    rtb_MultiportSwitch1_l = rtb_MathFunction_h;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch2' incorporates:\r\n     *  Gain: '<S12>/Gain1'\r\n     */\r\n    rtb_MultiportSwitch = rtb_Subtract1_l;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_MultiportSwitch1 = rtb_MultiportSwitch;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain1'\r\n     */\r\n    rtb_MultiportSwitch1_l = rtb_Subtract1_l;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch2' incorporates:\r\n     *  Gain: '<S12>/Gain2'\r\n     */\r\n    rtb_MultiportSwitch = rtb_MathFunction_h;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_MultiportSwitch1 = ((rtb_MultiportSwitch1_l + rtb_MultiportSwitch1) +\r\n      rtb_MathFunction) * 0.25;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain1'\r\n     *  Gain: '<S12>/Gain2'\r\n     *  Sum: '<S12>/Add2'\r\n     */\r\n    rtb_MultiportSwitch1_l = rtb_Subtract1_l;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_MultiportSwitch1 = ((rtb_MultiportSwitch1_l + rtb_MultiportSwitch1) +\r\n      rtb_MathFunction) * 0.25;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain'\r\n     *  Gain: '<S12>/Gain2'\r\n     *  Sum: '<S12>/Add2'\r\n     */\r\n    rtb_MultiportSwitch1_l = rtb_MultiportSwitch;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch2' incorporates:\r\n     *  Gain: '<S12>/Gain1'\r\n     */\r\n    rtb_MultiportSwitch = rtb_Subtract1_l;\r\n    break;\r\n\r\n   default:\r\n    rtb_MultiportSwitch1 = ((rtb_MultiportSwitch1_l - rtb_MultiportSwitch1) +\r\n      rtb_MathFunction) * 0.25;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain1'\r\n     *  Gain: '<S12>/Gain2'\r\n     *  Sum: '<S12>/Add1'\r\n     */\r\n    rtb_MultiportSwitch1_l = rtb_MathFunction_h;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S12>/Multiport Switch' */\r\n\r\n  /* Math: '<S3>/Math Function'\r\n   *\r\n   * About '<S3>/Math Function':\r\n   *  Operator: reciprocal\r\n   */\r\n  rtb_MathFunction_h = 1.0 / rtb_MathFunction;\r\n\r\n  /* Outport: '<Root>/DutyOut' incorporates:\r\n   *  Product: '<S3>/Product'\r\n   */\r\n  rtY.DutyOut[0] = rtb_MultiportSwitch1 * rtb_MathFunction_h;\r\n  rtY.DutyOut[1] = rtb_MultiportSwitch1_l * rtb_MathFunction_h;\r\n  rtY.DutyOut[2] = rtb_MultiportSwitch * rtb_MathFunction_h;\r\n\r\n  /* Update for UnitDelay: '<S4>/Unit Delay' */\r\n  rtDW.UnitDelay_DSTATE = rtb_Sum;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid VF_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"VF.h","type":"header","group":"model","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\svpwm\\VF_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: VF.h\r\n *\r\n * Code generated for Simulink model 'VF'.\r\n *\r\n * Model version                  : 1.9\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Oct 25 22:40:40 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_VF_h_\r\n#define RTW_HEADER_VF_h_\r\n#ifndef VF_COMMON_INCLUDES_\r\n#define VF_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* VF_COMMON_INCLUDES_ */\r\n\r\n/* Model Code Variants */\r\n#include \"mw_cmsis.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real32_T UnitDelay_DSTATE;           /* '<S4>/Unit Delay' */\r\n} DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T ud;                           /* '<Root>/ud' */\r\n  real_T uq;                           /* '<Root>/uq' */\r\n  real_T Freq;                         /* '<Root>/Freq' */\r\n  real32_T ubus;                       /* '<Root>/ubus' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T DutyOut[3];                   /* '<Root>/DutyOut' */\r\n} ExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void VF_initialize(void);\r\nextern void VF_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S5>/Scope1' : Unused code path elimination\r\n * Block '<S5>/Scope3' : Unused code path elimination\r\n * Block '<S12>/Scope' : Unused code path elimination\r\n * Block '<S12>/Scope1' : Unused code path elimination\r\n * Block '<S1>/Scope' : Unused code path elimination\r\n * Block '<S1>/Scope2' : Unused code path elimination\r\n * Block '<S1>/Data Type Conversion5' : Eliminate redundant data type conversion\r\n * Block '<S1>/Data Type Conversion6' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('svpwm/FOC_Openloop/VF')    - opens subsystem svpwm/FOC_Openloop/VF\r\n * hilite_system('svpwm/FOC_Openloop/VF/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'svpwm/FOC_Openloop'\r\n * '<S1>'   : 'svpwm/FOC_Openloop/VF'\r\n * '<S2>'   : 'svpwm/FOC_Openloop/VF/AntiPark'\r\n * '<S3>'   : 'svpwm/FOC_Openloop/VF/Duty'\r\n * '<S4>'   : 'svpwm/FOC_Openloop/VF/FreqGenerator'\r\n * '<S5>'   : 'svpwm/FOC_Openloop/VF/SVPWM'\r\n * '<S6>'   : 'svpwm/FOC_Openloop/VF/FreqGenerator/RangeLimit'\r\n * '<S7>'   : 'svpwm/FOC_Openloop/VF/FreqGenerator/RangeLimit/If Action Subsystem1'\r\n * '<S8>'   : 'svpwm/FOC_Openloop/VF/FreqGenerator/RangeLimit/If Action Subsystem2'\r\n * '<S9>'   : 'svpwm/FOC_Openloop/VF/FreqGenerator/RangeLimit/If Action Subsystem3'\r\n * '<S10>'  : 'svpwm/FOC_Openloop/VF/SVPWM/N_Sector'\r\n * '<S11>'  : 'svpwm/FOC_Openloop/VF/SVPWM/T1_T2_cal'\r\n * '<S12>'  : 'svpwm/FOC_Openloop/VF/SVPWM/T_cal'\r\n * '<S13>'  : 'svpwm/FOC_Openloop/VF/SVPWM/XYZ'\r\n */\r\n#endif                                 /* RTW_HEADER_VF_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\svpwm\\VF_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'VF'.\r\n *\r\n * Model version                  : 1.9\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Oct 25 22:40:40 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mw_cmsis.h","type":"header","group":"other","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\svpwm\\VF_ert_rtw","tag":"","groupDisplay":"Other files","code":"/* Copyright 2015-2021 The MathWorks, Inc. */\r\n\r\n/****************************************************\r\n*                                                   *   \r\n* Wrapper functions for CMSIS functions             *\r\n*                                                   *  \r\n****************************************************/\r\n\r\n#ifndef MW_CMSIS_H\r\n#define MW_CMSIS_H\r\n\r\n#include \"arm_math.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n#define mw_arm_abs_f32(pSrc, pDst, blockSize) arm_abs_f32((float32_t *)pSrc, (float32_t *)pDst, blockSize)\r\n#define mw_arm_abs_q7(pSrc, pDst, blockSize) arm_abs_q7((q7_t *)pSrc, (q7_t *)pDst, blockSize) \r\n#define mw_arm_abs_q15(pSrc, pDst, blockSize) arm_abs_q15((q15_t *)pSrc, (q15_t *)pDst, blockSize) \r\n#define mw_arm_abs_q31(pSrc, pDst, blockSize) arm_abs_q31((q31_t *)pSrc, (q31_t *)pDst, blockSize) \r\n\r\n#define mw_arm_sqrt_q15(in, pOut) arm_sqrt_q15((q15_t)in,(q15_t *)pOut)\r\n#define mw_arm_sqrt_q31(in, pOut) arm_sqrt_q31((q31_t)in,(q31_t *)pOut)\r\n#define mw_arm_sqrt_f32(in, pOut) arm_sqrt_f32((float32_t)in,(float32_t *)pOut)\r\n\r\n#define mw_arm_float_to_q31(pSrc, pDst, blockSize) arm_float_to_q31((float32_t *)pSrc, (q31_t *)pDst, blockSize)\r\n#define mw_arm_float_to_q15(pSrc, pDst, blockSize) arm_float_to_q15((float32_t *)pSrc, (q15_t *)pDst, blockSize)\r\n#define mw_arm_float_to_q7(pSrc, pDst, blockSize) arm_float_to_q7((float32_t *)pSrc, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_q15_to_float(pSrc, pDst, blockSize) arm_q15_to_float((q15_t *)pSrc, (float32_t *)pDst, blockSize)\r\n#define mw_arm_q15_to_q31(pSrc, pDst, blockSize) arm_q15_to_q31((q15_t *)pSrc, (q31_t *)pDst, blockSize)\r\n#define mw_arm_q15_to_q7(pSrc, pDst, blockSize) arm_q15_to_q7((q15_t *)pSrc, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_q31_to_float(pSrc, pDst, blockSize) arm_q31_to_float((q31_t *)pSrc, (float32_t *)pDst, blockSize)\r\n#define mw_arm_q31_to_q15(pSrc, pDst, blockSize) arm_q31_to_q15((q31_t *)pSrc, (q15_t *)pDst, blockSize)\r\n#define mw_arm_q31_to_q7(pSrc, pDst, blockSize) arm_q31_to_q7((q31_t *)pSrc, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_q7_to_float(pSrc, pDst, blockSize) arm_q7_to_float((q7_t *)pSrc, (float32_t *)pDst, blockSize)\r\n#define mw_arm_q7_to_q31(pSrc, pDst, blockSize) arm_q7_to_q31((q7_t *)pSrc, (q31_t *)pDst, blockSize)\r\n#define mw_arm_q7_to_q15(pSrc, pDst, blockSize) arm_q7_to_q15((q7_t *)pSrc, (q15_t *)pDst, blockSize)\r\n\r\n#define mw_arm_add_f32(pSrcA, pSrcB, pDst, blockSize) arm_add_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_add_q31(pSrcA, pSrcB, pDst, blockSize) arm_add_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_add_q15(pSrcA, pSrcB, pDst, blockSize) arm_add_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n#define mw_arm_add_q7(pSrcA, pSrcB, pDst, blockSize)  arm_add_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_sub_f32(pSrcA, pSrcB, pDst, blockSize) arm_sub_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_sub_q31(pSrcA, pSrcB, pDst, blockSize) arm_sub_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_sub_q15(pSrcA, pSrcB, pDst, blockSize) arm_sub_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n#define mw_arm_sub_q7(pSrcA, pSrcB, pDst, blockSize)  arm_sub_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_mult_f32(pSrcA, pSrcB, pDst, blockSize) arm_mult_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_mult_q31(pSrcA, pSrcB, pDst, blockSize) arm_mult_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_mult_q15(pSrcA, pSrcB, pDst, blockSize) arm_mult_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n#define mw_arm_mult_q7(pSrcA, pSrcB, pDst, blockSize)  arm_mult_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_cmplx_conj_f32(pSrc, pDst, numSamples) arm_cmplx_conj_f32((float32_t *)pSrc, (float32_t *)pDst, numSamples)\r\n#define mw_arm_cmplx_conj_q31(pSrc, pDst, numSamples) arm_cmplx_conj_q31((q31_t *)pSrc, (q31_t *)pDst, numSamples)\r\n#define mw_arm_cmplx_conj_q15(pSrc, pDst, numSamples) arm_cmplx_conj_q15((q15_t *)pSrc, (q15_t *)pDst, numSamples)\r\n\r\n#define mw_arm_cmplx_mult_cmplx_f32(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_cmplx_mult_cmplx_q31(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_cmplx_mult_cmplx_q15(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n\r\n#define mw_arm_cmplx_mult_real_f32(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\r\n#define mw_arm_cmplx_mult_real_q31(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\r\n#define mw_arm_cmplx_mult_real_q15(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\r\n\r\n#define mw_arm_rshift_q15(pSrc, shiftBits, pDst, blockSize) arm_shift_q15 ((q15_t *)pSrc, -(shiftBits),(q15_t *)pDst, blockSize)\r\n#define mw_arm_rshift_q31(pSrc, shiftBits, pDst, blockSize) arm_shift_q31 ((q31_t *)pSrc, -(shiftBits), (q31_t *)pDst, blockSize)\r\n#define mw_arm_rshift_q7(pSrc, shiftBits, pDst, blockSize) arm_shift_q7 ((q7_t *)pSrc,  -(shiftBits), (q7_t *)pDst, blockSize)\r\n\r\n#define mw_arm_shift_q15(pSrc, shiftBits, pDst, blockSize) arm_shift_q15 ((q15_t *)pSrc, shiftBits,(q15_t *)pDst, blockSize)\r\n#define mw_arm_shift_q31(pSrc, shiftBits, pDst, blockSize) arm_shift_q31 ((q31_t *)pSrc, shiftBits, (q31_t *)pDst, blockSize)\r\n#define mw_arm_shift_q7(pSrc, shiftBits, pDst, blockSize) arm_shift_q7 ((q7_t *)pSrc, shiftBits, (q7_t *)pDst, blockSize)\r\n\r\n#endif\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};