var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"SVPWM/VF","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\svpwm\\VF_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'VF'.\r\n *\r\n * Model version                  : 1.3\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Sat Oct 28 11:46:00 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"VF.h\"                        /* Model's header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  VF_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example \"main\" function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific.  This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  VF_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (the model's base sample time) here.  The\r\n   * call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* Disable rt_OneStep here */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"VF.c","type":"source","group":"model","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\svpwm\\VF_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: VF.c\r\n *\r\n * Code generated for Simulink model 'VF'.\r\n *\r\n * Model version                  : 1.3\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Sat Oct 28 11:46:00 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"VF.h\"\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\n\r\n/* Model step function */\r\nvoid VF_step(void)\r\n{\r\n  real_T rtb_Divide4;\r\n  real_T rtb_T4;\r\n  real_T rtb_T6;\r\n  real_T rtb_T6_tmp;\r\n  real_T rtb_Tcm2;\r\n  real32_T rtb_A;\r\n  real32_T rtb_SinCos5;\r\n  real32_T rtb_Sum_n;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/VF' */\r\n  /* Sum: '<S3>/Sum' incorporates:\r\n   *  Gain: '<S3>/Gain'\r\n   *  Inport: '<Root>/Freq'\r\n   *  UnitDelay: '<S3>/Unit Delay'\r\n   */\r\n  rtb_Sum_n = (real32_T)(0.00062831853071795862 * rtU.Freq) +\r\n    rtDW.UnitDelay_DSTATE;\r\n\r\n  /* If: '<S6>/If' incorporates:\r\n   *  Constant: '<S6>/Constant'\r\n   *  Constant: '<S6>/Constant1'\r\n   *  RelationalOperator: '<S6>/Relational Operator'\r\n   *  RelationalOperator: '<S6>/Relational Operator1'\r\n   */\r\n  if (rtb_Sum_n > 6.28318548F) {\r\n    /* Outputs for IfAction SubSystem: '<S6>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S7>/Action Port'\r\n     */\r\n    /* Sum: '<S7>/Sum' incorporates:\r\n     *  Constant: '<S7>/Constant'\r\n     */\r\n    rtb_Sum_n -= 6.28318548F;\r\n\r\n    /* End of Outputs for SubSystem: '<S6>/If Action Subsystem1' */\r\n  } else if (rtb_Sum_n < 0.0F) {\r\n    /* Outputs for IfAction SubSystem: '<S6>/If Action Subsystem3' incorporates:\r\n     *  ActionPort: '<S9>/Action Port'\r\n     */\r\n    /* Sum: '<S9>/Sum' incorporates:\r\n     *  Constant: '<S9>/Constant'\r\n     */\r\n    rtb_Sum_n += 6.28318548F;\r\n\r\n    /* End of Outputs for SubSystem: '<S6>/If Action Subsystem3' */\r\n  }\r\n\r\n  /* End of If: '<S6>/If' */\r\n\r\n  /* Trigonometry: '<S1>/SinCos4' */\r\n  rtb_A = sinf(rtb_Sum_n);\r\n\r\n  /* Trigonometry: '<S1>/SinCos5' */\r\n  rtb_SinCos5 = cosf(rtb_Sum_n);\r\n\r\n  /* Gain: '<S10>/Gain1' incorporates:\r\n   *  Gain: '<S11>/Gain2'\r\n   *  Inport: '<Root>/ud'\r\n   *  Inport: '<Root>/uq'\r\n   *  Product: '<S2>/Product2'\r\n   *  Product: '<S2>/Product3'\r\n   *  Sum: '<S2>/Subtract1'\r\n   */\r\n  rtb_T6 = (rtU.ud * rtb_SinCos5 - rtU.uq * rtb_A) * 0.8660254037844386;\r\n\r\n  /* Sum: '<S2>/Subtract' incorporates:\r\n   *  Inport: '<Root>/ud'\r\n   *  Inport: '<Root>/uq'\r\n   *  Product: '<S2>/Product'\r\n   *  Product: '<S2>/Product1'\r\n   */\r\n  rtb_Tcm2 = rtU.ud * rtb_A + rtU.uq * rtb_SinCos5;\r\n\r\n  /* Gain: '<S10>/Gain2' incorporates:\r\n   *  Gain: '<S11>/Gain1'\r\n   */\r\n  rtb_T6_tmp = 0.5 * rtb_Tcm2;\r\n\r\n  /* Sum: '<S10>/Add' incorporates:\r\n   *  Gain: '<S10>/Gain1'\r\n   *  Gain: '<S10>/Gain2'\r\n   *  Gain: '<S10>/Gain3'\r\n   *  Gain: '<S10>/Gain4'\r\n   *  Gain: '<S10>/Gain5'\r\n   *  Sum: '<S10>/Sum'\r\n   *  Sum: '<S10>/Sum1'\r\n   *  Switch: '<S10>/Switch'\r\n   *  Switch: '<S10>/Switch1'\r\n   *  Switch: '<S10>/Switch2'\r\n   */\r\n  rtb_A = (real32_T)((((-rtb_T6 - rtb_T6_tmp > 0.0) << 2) + ((rtb_T6 -\r\n    rtb_T6_tmp > 0.0) << 1)) + (rtb_Tcm2 > 0.0));\r\n\r\n  /* Product: '<S11>/Divide' incorporates:\r\n   *  Inport: '<Root>/u_bus'\r\n   */\r\n  rtb_Divide4 = 1.7320508075688772 / rtU.u_bus;\r\n\r\n  /* MultiPortSwitch: '<S11>/Multiport Switch' incorporates:\r\n   *  Gain: '<S11>/Gain3'\r\n   *  Gain: '<S11>/Gain4'\r\n   *  Gain: '<S11>/Gain5'\r\n   *  Gain: '<S11>/Gain6'\r\n   *  Product: '<S11>/Divide1'\r\n   *  Product: '<S11>/Divide2'\r\n   *  Product: '<S11>/Divide3'\r\n   *  Sum: '<S11>/Sum'\r\n   *  Sum: '<S11>/Sum1'\r\n   */\r\n  switch ((int32_T)rtb_A) {\r\n   case 1:\r\n    rtb_T4 = (-rtb_T6 + rtb_T6_tmp) * rtb_Divide4;\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain3'\r\n     *  Product: '<S11>/Divide2'\r\n     *  Product: '<S11>/Divide3'\r\n     *  Sum: '<S11>/Sum'\r\n     *  Sum: '<S11>/Sum1'\r\n     */\r\n    rtb_T6 = (rtb_T6 + rtb_T6_tmp) * rtb_Divide4;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_T4 = (rtb_T6 + rtb_T6_tmp) * rtb_Divide4;\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain6'\r\n     *  Product: '<S11>/Divide1'\r\n     *  Product: '<S11>/Divide2'\r\n     *  Sum: '<S11>/Sum'\r\n     */\r\n    rtb_T6 = -(rtb_Tcm2 * rtb_Divide4);\r\n    break;\r\n\r\n   case 3:\r\n    rtb_T4 = -((-rtb_T6 + rtb_T6_tmp) * rtb_Divide4);\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain3'\r\n     *  Gain: '<S11>/Gain4'\r\n     *  Product: '<S11>/Divide1'\r\n     *  Product: '<S11>/Divide3'\r\n     *  Sum: '<S11>/Sum1'\r\n     */\r\n    rtb_T6 = rtb_Tcm2 * rtb_Divide4;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_T4 = -(rtb_Tcm2 * rtb_Divide4);\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain3'\r\n     *  Gain: '<S11>/Gain6'\r\n     *  Product: '<S11>/Divide1'\r\n     *  Product: '<S11>/Divide3'\r\n     *  Sum: '<S11>/Sum1'\r\n     */\r\n    rtb_T6 = (-rtb_T6 + rtb_T6_tmp) * rtb_Divide4;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_T4 = rtb_Tcm2 * rtb_Divide4;\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain5'\r\n     *  Product: '<S11>/Divide1'\r\n     *  Product: '<S11>/Divide2'\r\n     *  Sum: '<S11>/Sum'\r\n     */\r\n    rtb_T6 = -((rtb_T6 + rtb_T6_tmp) * rtb_Divide4);\r\n    break;\r\n\r\n   default:\r\n    rtb_T4 = -((rtb_T6 + rtb_T6_tmp) * rtb_Divide4);\r\n\r\n    /* MultiPortSwitch: '<S11>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S11>/Gain3'\r\n     *  Gain: '<S11>/Gain4'\r\n     *  Gain: '<S11>/Gain5'\r\n     *  Product: '<S11>/Divide2'\r\n     *  Product: '<S11>/Divide3'\r\n     *  Sum: '<S11>/Sum'\r\n     *  Sum: '<S11>/Sum1'\r\n     */\r\n    rtb_T6 = -((-rtb_T6 + rtb_T6_tmp) * rtb_Divide4);\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S11>/Multiport Switch' */\r\n\r\n  /* Product: '<S11>/Divide4' incorporates:\r\n   *  Sum: '<S11>/Subtract'\r\n   */\r\n  rtb_Divide4 = 1.0 / (rtb_T4 + rtb_T6);\r\n\r\n  /* Switch: '<S11>/Switch' incorporates:\r\n   *  Constant: '<S1>/Constant1'\r\n   *  Product: '<S11>/Divide5'\r\n   *  Product: '<S11>/Divide6'\r\n   *  Sum: '<S11>/Add'\r\n   *  Switch: '<S11>/Switch1'\r\n   */\r\n  if ((rtb_T4 - 1.0) + rtb_T6 > 0.0) {\r\n    rtb_Tcm2 = rtb_T4 * rtb_Divide4;\r\n    rtb_T6 *= rtb_Divide4;\r\n  } else {\r\n    rtb_Tcm2 = rtb_T4;\r\n  }\r\n\r\n  /* End of Switch: '<S11>/Switch' */\r\n\r\n  /* Gain: '<S12>/Gain' incorporates:\r\n   *  Constant: '<S1>/Constant1'\r\n   *  Sum: '<S12>/Add'\r\n   */\r\n  rtb_Divide4 = ((1.0 - rtb_Tcm2) - rtb_T6) * 0.25;\r\n\r\n  /* Sum: '<S12>/Add1' incorporates:\r\n   *  Gain: '<S12>/Gain1'\r\n   */\r\n  rtb_T4 = 0.5 * rtb_Tcm2 + rtb_Divide4;\r\n\r\n  /* Sum: '<S12>/Add2' incorporates:\r\n   *  Gain: '<S12>/Gain2'\r\n   */\r\n  rtb_T6_tmp = 0.5 * rtb_T6 + rtb_T4;\r\n\r\n  /* MultiPortSwitch: '<S12>/Tcm1 ' incorporates:\r\n   *  Gain: '<S12>/Gain2'\r\n   *  Sum: '<S12>/Add2'\r\n   */\r\n  switch ((int32_T)rtb_A) {\r\n   case 1:\r\n    rtb_T6 = rtb_T4;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm2' */\r\n    rtb_Tcm2 = rtb_Divide4;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm3' incorporates:\r\n     *  Sum: '<S12>/Add2'\r\n     */\r\n    rtb_Divide4 = rtb_T6_tmp;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_T6 = rtb_Divide4;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm2' incorporates:\r\n     *  Sum: '<S12>/Add2'\r\n     */\r\n    rtb_Tcm2 = rtb_T6_tmp;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm3' */\r\n    rtb_Divide4 = rtb_T4;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_T6 = rtb_Divide4;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm2' */\r\n    rtb_Tcm2 = rtb_T4;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm3' incorporates:\r\n     *  Sum: '<S12>/Add2'\r\n     */\r\n    rtb_Divide4 = rtb_T6_tmp;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_T6 = 0.5 * rtb_T6 + rtb_T4;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm2' incorporates:\r\n     *  Gain: '<S12>/Gain2'\r\n     *  Sum: '<S12>/Add2'\r\n     */\r\n    rtb_Tcm2 = rtb_T4;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_T6 = 0.5 * rtb_T6 + rtb_T4;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm2' incorporates:\r\n     *  Gain: '<S12>/Gain2'\r\n     *  Sum: '<S12>/Add2'\r\n     */\r\n    rtb_Tcm2 = rtb_Divide4;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm3' */\r\n    rtb_Divide4 = rtb_T4;\r\n    break;\r\n\r\n   default:\r\n    rtb_T6 = rtb_T4;\r\n\r\n    /* MultiPortSwitch: '<S12>/Tcm2' incorporates:\r\n     *  Sum: '<S12>/Add2'\r\n     */\r\n    rtb_Tcm2 = rtb_T6_tmp;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S12>/Tcm1 ' */\r\n\r\n  /* Update for UnitDelay: '<S3>/Unit Delay' */\r\n  rtDW.UnitDelay_DSTATE = rtb_Sum_n;\r\n\r\n  /* Outport: '<Root>/DutyOut' incorporates:\r\n   *  Constant: '<S1>/Constant1'\r\n   *  Gain: '<S4>/Gain'\r\n   *  Sum: '<S4>/Add'\r\n   *  Sum: '<S4>/Add1'\r\n   *  Sum: '<S4>/Add2'\r\n   */\r\n  rtY.DutyOut[0] = 1.0 - 2.0 * rtb_T6;\r\n  rtY.DutyOut[1] = 1.0 - 2.0 * rtb_Tcm2;\r\n  rtY.DutyOut[2] = 1.0 - 2.0 * rtb_Divide4;\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/VF' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid VF_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"VF.h","type":"header","group":"model","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\svpwm\\VF_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: VF.h\r\n *\r\n * Code generated for Simulink model 'VF'.\r\n *\r\n * Model version                  : 1.3\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Sat Oct 28 11:46:00 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_VF_h_\r\n#define RTW_HEADER_VF_h_\r\n#include <math.h>\r\n#ifndef VF_COMMON_INCLUDES_\r\n#define VF_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* VF_COMMON_INCLUDES_ */\r\n\r\n/* Model Code Variants */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real32_T UnitDelay_DSTATE;           /* '<S3>/Unit Delay' */\r\n} DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T ud;                           /* '<Root>/ud' */\r\n  real_T uq;                           /* '<Root>/uq' */\r\n  real_T Freq;                         /* '<Root>/Freq' */\r\n  real32_T u_bus;                      /* '<Root>/u_bus' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T DutyOut[3];                   /* '<Root>/DutyOut' */\r\n} ExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void VF_initialize(void);\r\nextern void VF_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S10>/Scope' : Unused code path elimination\r\n * Block '<S10>/Scope1' : Unused code path elimination\r\n * Block '<S11>/Scope' : Unused code path elimination\r\n * Block '<S1>/Data Type Conversion5' : Eliminate redundant data type conversion\r\n * Block '<S1>/Data Type Conversion6' : Eliminate redundant data type conversion\r\n * Block '<S10>/Gain' : Eliminated nontunable gain of 1\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('SVPWM/VF')    - opens subsystem SVPWM/VF\r\n * hilite_system('SVPWM/VF/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'SVPWM'\r\n * '<S1>'   : 'SVPWM/VF'\r\n * '<S2>'   : 'SVPWM/VF/AntiPark'\r\n * '<S3>'   : 'SVPWM/VF/FreqGenerator'\r\n * '<S4>'   : 'SVPWM/VF/PWMOut'\r\n * '<S5>'   : 'SVPWM/VF/SVPWM'\r\n * '<S6>'   : 'SVPWM/VF/FreqGenerator/RangeLimit'\r\n * '<S7>'   : 'SVPWM/VF/FreqGenerator/RangeLimit/If Action Subsystem1'\r\n * '<S8>'   : 'SVPWM/VF/FreqGenerator/RangeLimit/If Action Subsystem2'\r\n * '<S9>'   : 'SVPWM/VF/FreqGenerator/RangeLimit/If Action Subsystem3'\r\n * '<S10>'  : 'SVPWM/VF/SVPWM/N'\r\n * '<S11>'  : 'SVPWM/VF/SVPWM/t4_t6'\r\n * '<S12>'  : 'SVPWM/VF/SVPWM/t_abc'\r\n */\r\n#endif                                 /* RTW_HEADER_VF_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"S:\\STM32SSC\\STM32\\STM32SSC_Engine\\Mode\\PMSM\\svpwm\\VF_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'VF'.\r\n *\r\n * Model version                  : 1.3\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Sat Oct 28 11:46:00 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};